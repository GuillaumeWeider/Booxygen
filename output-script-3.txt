$ ./script-3.rb doxygen-exemple/xml/
[group] graphics
   Full desc: All the classes related to graphics. 
<para><itemizedlist>
<listitem><para>GPU Resources: <ref refid="classgf_1_1_shader" kindref="compound">gf::Shader</ref>, <ref refid="classgf_1_1_texture" kindref="compound">gf::Texture</ref>, <ref refid="structgf_1_1_blend_mode" kindref="compound">gf::BlendMode</ref>, <ref refid="classgf_1_1_vertex_buffer" kindref="compound">gf::VertexBuffer</ref></para></listitem><listitem><para>Resources: <ref refid="classgf_1_1_image" kindref="compound">gf::Image</ref>, <ref refid="classgf_1_1_font" kindref="compound">gf::Font</ref>, <ref refid="classgf_1_1_animation" kindref="compound">gf::Animation</ref></para></listitem><listitem><para>Drawables: <ref refid="classgf_1_1_drawable" kindref="compound">gf::Drawable</ref>, <ref refid="classgf_1_1_vertex_array" kindref="compound">gf::VertexArray</ref>, <ref refid="classgf_1_1_post_processing" kindref="compound">gf::PostProcessing</ref>, <ref refid="classgf_1_1_transformable" kindref="compound">gf::Transformable</ref>, <ref refid="classgf_1_1_shape" kindref="compound">gf::Shape</ref>, <ref refid="classgf_1_1_curve" kindref="compound">gf::Curve</ref>, <ref refid="classgf_1_1_sprite" kindref="compound">gf::Sprite</ref>, <ref refid="classgf_1_1_text" kindref="compound">gf::Text</ref>, <ref refid="classgf_1_1_nine_patch" kindref="compound">gf::NinePatch</ref>, <ref refid="classgf_1_1_buffered_geometry" kindref="compound">gf::BufferedGeometry</ref>, <ref refid="classgf_1_1_tile_layer" kindref="compound">gf::TileLayer</ref>, <ref refid="classgf_1_1_logo" kindref="compound">gf::Logo</ref></para></listitem><listitem><para>Targets: <ref refid="classgf_1_1_render_target" kindref="compound">gf::RenderTarget</ref>, <ref refid="classgf_1_1_render_window" kindref="compound">gf::RenderWindow</ref>, <ref refid="classgf_1_1_render_texture" kindref="compound">gf::RenderTexture</ref>, <ref refid="classgf_1_1_render_pipeline" kindref="compound">gf::RenderPipeline</ref>, <ref refid="classgf_1_1_view" kindref="compound">gf::View</ref></para></listitem><listitem><para>Utility: <ref refid="classgf_1_1_sprite_batch" kindref="compound">gf::SpriteBatch</ref>, <ref refid="structgf_1_1_color" kindref="compound">gf::Color</ref>, <ref refid="structgf_1_1_color_ramp" kindref="compound">gf::ColorRamp</ref>, <ref refid="classgf_1_1_u_i" kindref="compound">gf::UI</ref>, <ref refid="classgf_1_1_graphics_info" kindref="compound">gf::GraphicsInfo</ref> </para></listitem></itemizedlist>
</para>
- Classes:
 * class - gf::AnimatedSprite
   Desc: An animated sprite. 
<para>An animated sprite is a sprite that can display an animation.</para>
 * class - gf::Animation
   Desc: An animation. 
<para>An animation is a collection of frames that are displayed consecutively during a predefined amount of time.</para>
 * struct - gf::BlendMode
   Desc: Blending modes for drawing. 
<para><ref refid="structgf_1_1_blend_mode" kindref="compound">gf::BlendMode</ref> is a class that represents a <ulink url="https://www.opengl.org/wiki/Blending">blend mode</ulink>. A blend mode determines how the colors of an object you draw are mixed with the colors that are already in the buffer.</para>
 * class - gf::BufferedGeometry
   Desc: A drawable for buffers. 
<para>A buffered geometry is a lightweight object to draw vertex buffers. It can handle two vertex buffers, one for the main object and one for the outline when it exists. The outline is drawn first and the main object second.</para>
 * struct - gf::Color
   Desc: Predefined colors. 
<para>This class does not contain anything but predefined colors. All the primary, secondary and <ulink url="https://en.wikipedia.org/wiki/Tertiary_color">tertiary colors</ulink> are defined by their usual names.</para>
 * struct - gf::ColorRamp
   Desc: A color ramp. 
<para><simplesect kind="see"><para><ref refid="group__core_1ga8c82c7df6d3bbd7f8d3601534b22a087" kindref="member">gf::Color4f</ref> </para></simplesect>
</para>
 * class - gf::Coordinates
   Desc: Helper to compute coordinates in HUD. 
 * class - gf::Curve
   Desc: A curve is a one dimension object. 
<para>A curve is similar to a shape but for one dimension objects like lines, <ulink url="https://en.wikipedia.org/wiki/B%C3%A9zier_curve">BÃ©zier curves</ulink>, or compound curves.</para>
 * class - gf::Drawable
   Desc: Abstract base class for objects that can be drawn to a render window. 
<para><ref refid="classgf_1_1_drawable" kindref="compound">gf::Drawable</ref> is a very simple base class that allows objects of derived classes to be drawn to a sf::RenderTarget.</para>
 * class - gf::Effect
   Desc: A post-processing effect. 
<para><simplesect kind="see"><para><ref refid="classgf_1_1_post_processing" kindref="compound">gf::PostProcessing</ref> </para></simplesect>
</para>
 * class - gf::DefaultEffect
   Desc: Default effect. 
<para>This post-processing effect does nothing </para>
 * class - gf::AntiAliasingEffect
   Desc: Anti-aliasing effect. 
<para>This effect uses <ulink url="https://en.wikipedia.org/wiki/Fast_approximate_anti-aliasing">Fast Approximate Anti-Aliasing (FXAA)</ulink>. </para>
 * class - gf::ColorMatrixEffect
   Desc: Generic color matrix effect. 
<para>This effect uses a color matrix. You can use it directly or use a subclass that defines their own color matrix for various needs.</para>
 * class - gf::ColorEffect
   Desc: Simple color effects. 
 * class - gf::ColorBlindEffect
   Desc: Simulation of color blindness. 
<para><ulink url="https://en.wikipedia.org/wiki/Color_blindness">Color blindness</ulink> is a deficiency of the vision that affects a significant percentage of the population.</para>
 * class - gf::EdgeEffect
   Desc: Edge detector. 
<para>This effect uses a <ulink url="https://en.wikipedia.org/wiki/Sobel_operator">Sobel filter</ulink>. </para>
 * struct - gf::Glyph
   Desc: A glyph. 
<para>A glyph is the visual representation of a character.</para>
 * class - gf::Font
   Desc: A character font. 
<para>Fonts can be loaded from a file, from memory or from a custom stream, and supports the most common types of fonts. See the <computeroutput><ref refid="classgf_1_1_font_1aa7d23688c81a7c31a5667547e1072501" kindref="member">loadFromFile()</ref></computeroutput> function for the complete list of supported formats.</para>
 * struct - gf::GraphicsInfo::Format
   Desc: An OpenGL format. 
 * class - gf::GraphicsInfo
   Desc: A class for graphics info. 
<para>This class only contains static methods. It provides convenient functions for OpenGL configuration variables. The name of the variables are given in the documentation of the functions.</para>
 * class - gf::SquareGrid
   Desc: A square grid. 
 * class - gf::Image
   Desc: Class for loading, manipulating and saving images. 
<para><ref refid="classgf_1_1_image" kindref="compound">gf::Image</ref> is an abstraction to manipulate images as bidimensional arrays of pixels. The class provides functions to load, read, write and save pixels, as well as many other useful functions.</para>
 * class - gf::Logo
   Desc: The gf logo. 
<para>This class can show the <computeroutput>gf</computeroutput> logo without loading any font. It is loaded in a texture in the constructor so that you can use it wherever you want.</para>
 * class - gf::NinePatch
   Desc: A nine-patch. 
<para>A nine-patch is a stretchable image that can be automatically resized. You just have to indicate the position of the stretchable area and that's it.</para>
 * class - gf::PointParticles
   Desc: A class to display a high number of points. 
 * class - gf::ShapeParticles
   Desc: A class to display a high number of small simple shapes. 
 * class - gf::SpriteParticles
   Desc: A class to display a high number of sprites. 
<para><simplesect kind="see"><para><ref refid="classgf_1_1_sprite_batch" kindref="compound">gf::SpriteBatch</ref> </para></simplesect>
</para>
 * class - gf::PostProcessing
   Desc: A post-processing drawable. 
<para>This class is a light-weight object to apply a post-processing effect to a texture. The texture generally comes froma <ref refid="classgf_1_1_render_texture" kindref="compound">gf::RenderTexture</ref>.</para>
 * class - gf::RenderPipeline
   Desc: A render pipeline. 
<para>A render pipeline automates the application of post-processing effects. A good way to use this class is to make a subclass with all the effects you want to add.</para>
 * struct - gf::RenderStates
   Desc: Define the states used for drawing to a RenderTarget. 
<para>There are four global states that can be applied to the drawn objects:</para>
 * class - gf::RenderTarget
   Desc: Base class for all render targets (window, texture, ...) 
<para><ref refid="classgf_1_1_render_target" kindref="compound">gf::RenderTarget</ref> defines the common behavior of all the 2D render targets usable in the graphics module. It makes it possible to draw 2D entities like sprites, shapes, text without using any OpenGL command directly.</para>
 * class - gf::RenderTexture
   Desc: Target for off-screen 2D rendering into a texture. 
<para><ref refid="classgf_1_1_render_texture" kindref="compound">gf::RenderTexture</ref> is the little brother of <ref refid="classgf_1_1_render_window" kindref="compound">gf::RenderWindow</ref>. It implements the same 2D drawing and OpenGL-related functions (see their base class <ref refid="classgf_1_1_render_target" kindref="compound">gf::RenderTarget</ref> for more details), the difference is that the result is stored in an off-screen texture rather than being show in a window.</para>
 * class - gf::RenderWindow
   Desc: A window that can serve as a target for 2D drawing. 
<para><ref refid="classgf_1_1_render_window" kindref="compound">gf::RenderWindow</ref> is the main class of the graphics module. It defines an OS window that can be painted using the other classes of the graphics module.</para>
 * class - gf::Shader
   Desc: An OpenGL vertex and/or fragment shader. 
<para>Shaders are programs written using a specific language, executed directly by the graphics card and allowing to apply real-time operations to the rendered entities.</para>
 * class - gf::Shape
   Desc: Base class for textured shapes with outline. 
<para><ref refid="classgf_1_1_shape" kindref="compound">gf::Shape</ref> is a drawable class that allows to define and display a custom convex shape on a render target. It's only an abstract base, it needs to be specialized for concrete types of shapes (circle, rectangle, convex polygon, star, ...).</para>
 * class - gf::RectangleShape
   Desc: Specialized shape representing a rectangle. 
<para>This class inherits all the functions of <ref refid="classgf_1_1_transformable" kindref="compound">gf::Transformable</ref> (position, rotation, scale, bounds, ...) as well as the functions of <ref refid="classgf_1_1_shape" kindref="compound">gf::Shape</ref> (outline, color, texture, ...).</para>
 * class - gf::CircleShape
   Desc: Specialized shape representing a circle. 
<para>This class inherits all the functions of <ref refid="classgf_1_1_transformable" kindref="compound">gf::Transformable</ref> (position, rotation, scale, bounds, ...) as well as the functions of <ref refid="classgf_1_1_shape" kindref="compound">gf::Shape</ref> (outline, color, texture, ...).</para>
 * class - gf::ConvexShape
   Desc: Specialized shape representing a convex polygon. 
<para>This class inherits all the functions of <ref refid="classgf_1_1_transformable" kindref="compound">gf::Transformable</ref> (position, rotation, scale, bounds, ...) as well as the functions of <ref refid="classgf_1_1_shape" kindref="compound">gf::Shape</ref> (outline, color, texture, ...).</para>
 * class - gf::StarShape
   Desc: Specialized shape representing a star. 
<para>This class inherits all the functions of <ref refid="classgf_1_1_transformable" kindref="compound">gf::Transformable</ref> (position, rotation, scale, bounds, ...) as well as the functions of <ref refid="classgf_1_1_shape" kindref="compound">gf::Shape</ref> (outline, color, texture, ...).</para>
 * class - gf::RoundedRectangleShape
   Desc: Specialized shape representing a rounded rectangle. 
<para>This class inherits all the functions of <ref refid="classgf_1_1_transformable" kindref="compound">gf::Transformable</ref> (position, rotation, scale, bounds, ...) as well as the functions of <ref refid="classgf_1_1_shape" kindref="compound">gf::Shape</ref> (outline, color, texture, ...).</para>
 * class - gf::Sprite
   Desc: A drawable representation of a texture, with its own transformations, color, etc. 
<para><ref refid="classgf_1_1_sprite" kindref="compound">gf::Sprite</ref> is a drawable class that allows to easily display a texture (or a part of it) on a render target.</para>
 * class - gf::SpriteBatch
   Desc: A sprite batch. 
<para>A sprite batch is responsible for minimizing the number of draw calls by concatenating the different calls for sprites.</para>
 * class - gf::Text
   Desc: Graphical text that can be drawn to a render target. 
<para><ref refid="classgf_1_1_text" kindref="compound">gf::Text</ref> is a drawable class that allows to easily display some text with custom style and color on a render target.</para>
 * class - gf::BareTexture
   Desc: An image that lives in the graphic memory that can be used for drawing. 
<para><ref refid="classgf_1_1_bare_texture" kindref="compound">gf::BareTexture</ref> stores pixels that can be drawn, with a sprite for example. A texture lives in the graphics card memory, therefore it is very fast to draw a texture to a render target, or copy a render target to a texture (the graphics card can access both directly).</para>
 * class - gf::Texture
   Desc: A texture for colored images. 
<para>A texture can be loaded from an image, but also directly from a file/memory/stream. The necessary shortcuts are defined so that you don't need an image first for the most common cases. However, if you want to perform some modifications on the pixels before creating the final texture, you can load your file to a <ref refid="classgf_1_1_image" kindref="compound">gf::Image</ref>, do whatever you need with the pixels, and then call <ref refid="classgf_1_1_texture_1a41b0c0263b7906a86b0ef1d483945f33" kindref="member">Texture::loadFromImage</ref>.</para>
 * class - gf::AlphaTexture
   Desc: A texture with a single alpha channel. 
<para>This texture is used internally by <ref refid="classgf_1_1_font" kindref="compound">gf::Font</ref> </para>
 * class - gf::TileLayer
   Desc: A tile layer. 
<para>A tile layer represents a map made of tiles. <ref refid="classgf_1_1_tile_layer" kindref="compound">gf::TileLayer</ref> makes it easy to draw a tile map.</para>
 * class - gf::Transformable
   Desc: Decomposed transform defined by a position, a rotation and a scale. 
<para><ref refid="group__core_1gae702e6021057443ca43f94b32618bbc2" kindref="member">gf::Matrix3f</ref>, as a low-level class, offers a great level of flexibility but it is not always convenient to manage. Indeed, one can easily combine any kind of operation, such as a translation followed by a rotation followed by a scaling, but once the result transform is built, there's no way to go backward and, let's say, change only the rotation without modifying the translation and scaling. The entire transform must be recomputed, which means that you need to retrieve the initial translation and scale factors as well, and combine them the same way you did before updating the rotation. This is a tedious operation, and it requires to store all the individual components of the final transform.</para>
 * struct - gf::UIEditType
   Desc: Predefined flags for edit. 
 * struct - gf::UIBrowser
   Desc: Data for file selector. 
<para><simplesect kind="see"><para><ref refid="classgf_1_1_u_i_1ae6edb881afccc57737a6a998b5ffcd9c" kindref="member">gf::UI::fileSelector()</ref> </para></simplesect>
</para>
 * class - gf::UI
   Desc: Context for an immediate mode graphical interface. 
<para>When building a graphical interfaces, you have basically two choices: either the retained mode where you build a hierarchy of widgets, or the immediate mode where widgets are built from function calls. Choosing the best mode between these two may be <ulink url="http://gamedev.stackexchange.com/questions/24103/immediate-gui-yae-or-nay">controversial</ulink>. gf offers an immediate mode graphical interface through this class.</para>
 * struct - gf::Vertex
   Desc: A point associated with a color and a texture coordinate. 
<para><ref refid="structgf_1_1_vertex" kindref="compound">gf::Vertex</ref> represents the association between a position in the world, a color and texture coordinates.</para>
 * class - gf::VertexArray
   Desc: A set of primitives. 
<para><ref refid="classgf_1_1_vertex_array" kindref="compound">gf::VertexArray</ref> is a very simple wrapper around a dynamic array of vertices and a primitive type.</para>
 * class - gf::VertexBuffer
   Desc: Data in the graphics memory. 
<para>A vertex buffer is a buffer that resides directly in the graphics memory. The advantage is that the draw operations are faster than uploading data each time. The drawback is that the data must not change, i.e. data can be loaded only once.</para>
 * class - gf::View
   Desc: 2D camera that defines what region is shown on screen 
<para><ref refid="classgf_1_1_view" kindref="compound">gf::View</ref> defines a camera in the 2D scene. This is a very powerful concept: you can scroll, rotate or zoom the entire scene without altering the way that your drawable objects are drawn.</para>
 * class - gf::AdaptativeView
   Desc: Adaptative view. 
<para>An adaptative view is a view that adapts automatically to screen resolution change.</para>
 * class - gf::ZoomingViewAdaptor
   Desc: A view adaptor for zooming/moving with the mouse. 
 * class - gf::ViewContainer
   Desc: A container of views. 
<para>A view manager handles several adaptive views. It can update all the views at the same time. All it needs is the events that come from the window.</para>
 * class - gf::StretchView
   Desc: Stretch view. 
<para>This view assumes that the screen is always the same size as the world. The world will then be stretched to fit the screen. There are no black bars, but the aspect ratio may not be the same after the scaling took place.</para>
 * class - gf::FitView
   Desc: Fit view. 
<para>This view will always maintain the aspect ratio of the world, while scaling it as much as possible to fit the screen. One disadvantage with this strategy is that there may appear black bars.</para>
 * class - gf::FillView
   Desc: Fill view. 
<para>This view keeps the aspect ratio of the world, but it will always fill the whole screen which might result in parts of the world being cut off.</para>
 * class - gf::ExtendView
   Desc: Extend view. 
<para>This view keeps the world aspect ratio without black bars by extending the world in one direction. The world is first scaled to fit within the viewport, then the shorter dimension is lengthened to fill the viewport.</para>
 * class - gf::LockedView
   Desc: Locked view. 
<para>This view keeps the world size constant and add black bars if the world is smaller than the screen size or make a zoom in the center of the world if the world is bigger than the screen size.</para>
 * class - gf::ScreenView
   Desc: Screen view. 
<para>This view will always match the window size which means that no scaling happens and no black bars appear. As a disadvantage this means that the gameplay might change, because a player with a bigger screen might see more of the game, than a player with a smaller screen size.</para>
- enum:
 * Alignment
 * Anchor
 * BlendEquation
 * BlendFactor
 * PrimitiveType
 * UIWindow
 * UICollapse
 * UILayout
 * UITree
 * UIAlignment
 * UIButtonBehavior
 * UIProgress
 * UISymbol
 * UIEdit
 * UIEditEvent
 * UIEditFilter
 * UIPopup
 * UIPredefinedStyle
- typedef:
 * UIWindowFlags
 * UIScroll
 * UIEditFlags
 * UIEditEventFlags
- function:
 * operator==
- variable:
 * BlendAlpha
 * BlendAdd
 * BlendMultiply
 * BlendNone
