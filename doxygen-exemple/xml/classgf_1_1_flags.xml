<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgf_1_1_flags" kind="class" language="C++" prot="public">
    <compoundname>gf::Flags</compoundname>
    <includes refid="_flags_8h" local="no">gf/Flags.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>E</declname>
        <defname>E</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classgf_1_1_flags_1a264a89d5e519c458d6be4e887f3d903e" prot="public" static="no">
        <type>typename std::underlying_type&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt;::type</type>
        <definition>using gf::Flags&lt; E &gt;::Type =  typename std::underlying_type&lt;E&gt;::type</definition>
        <argsstring></argsstring>
        <name>Type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="192" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgf_1_1_flags_1a3af57a60815a7bf53f925d0a292bafce" prot="private" static="no" mutable="no">
        <type><ref refid="classgf_1_1_flags_1a264a89d5e519c458d6be4e887f3d903e" kindref="member">Type</ref></type>
        <definition>Type gf::Flags&lt; E &gt;::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="212" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgf_1_1_flags_1a39c1256650fe341a78676e14976ed116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gf::Flags&lt; E &gt;::Flags</definition>
        <argsstring>()=default</argsstring>
        <name>Flags</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1a15eadb1ca64e2d0b86663b5bb1bd11e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr gf::Flags&lt; E &gt;::Flags</definition>
        <argsstring>(NoneType)</argsstring>
        <name>Flags</name>
        <param>
          <type><ref refid="structgf_1_1_none_type" kindref="compound">NoneType</ref></type>
        </param>
        <briefdescription>
<para>Constructor with no flag set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="78" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1aeb4a6661c9a5800d6b8a0ee0c7d8a25a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr gf::Flags&lt; E &gt;::Flags</definition>
        <argsstring>(AllType)</argsstring>
        <name>Flags</name>
        <param>
          <type><ref refid="structgf_1_1_all_type" kindref="compound">AllType</ref></type>
        </param>
        <briefdescription>
<para>Constructor with all flags set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="87" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="87" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1a0b9c091b5cc8f4d1d534bfcb918b63ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr gf::Flags&lt; E &gt;::Flags</definition>
        <argsstring>(E e)</argsstring>
        <name>Flags</name>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Constructor with an enum value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>An enum value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="98" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1a68a5382c456d4591d260ebb96c68f8b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt;</type>
        <definition>constexpr Flags&lt;E&gt; gf::Flags&lt; E &gt;::operator~</definition>
        <argsstring>() const</argsstring>
        <name>operator~</name>
        <briefdescription>
<para>Binary NOT operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A bitfield where all flags have been inverted </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="109" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1a9c270212f03b03d3c7e358caad1ddfe5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classgf_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>constexpr Flags gf::Flags&lt; E &gt;::operator|</definition>
        <argsstring>(Flags flags) const</argsstring>
        <name>operator|</name>
        <param>
          <type><ref refid="classgf_1_1_flags" kindref="compound">Flags</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Binary OR between two bitfields. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Another bitfield </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bitfield with a binary OR of the two bitfields </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="119" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1a9dbcca8fa649ea76c8a461a2bd243c89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt; &amp;</type>
        <definition>Flags&lt;E&gt;&amp; gf::Flags&lt; E &gt;::operator|=</definition>
        <argsstring>(Flags&lt; E &gt; flags)</argsstring>
        <name>operator|=</name>
        <param>
          <type><ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt;</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Binary OR and assignment. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Another bitfield </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bitfield with a binary OR of the flags and the other&apos;s flags </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="129" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1aa140280497e96f5372716c8232d81cd1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classgf_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>constexpr Flags gf::Flags&lt; E &gt;::operator&amp;</definition>
        <argsstring>(Flags flags) const</argsstring>
        <name>operator &amp;</name>
        <param>
          <type><ref refid="classgf_1_1_flags" kindref="compound">Flags</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Binary AND between two bitfields. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Another bitfield </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bitfield with a binary AND of the two bitfields </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="140" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1ad1555d20e0d8c89cd990a7e5a6e97938" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt; &amp;</type>
        <definition>Flags&lt;E&gt;&amp; gf::Flags&lt; E &gt;::operator&amp;=</definition>
        <argsstring>(Flags&lt; E &gt; flags)</argsstring>
        <name>operator &amp;=</name>
        <param>
          <type><ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt;</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Binary AND and assignment. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Another bitfield </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bitfield with a binary AND of the flags and the other&apos;s flags </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="150" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1a2cfcdb3b582a0ab20ed132e432fe607b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr gf::Flags&lt; E &gt;::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Test if any flag is set. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if any flag is set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="160" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1aebb262f6354eaa3af73ea36ce82dcc3b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool gf::Flags&lt; E &gt;::test</definition>
        <argsstring>(E flag) const</argsstring>
        <name>test</name>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Test if a specified flag is set. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to test </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the flag is set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="170" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1a7add558107e334c0cfe71893fced16f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gf::Flags&lt; E &gt;::set</definition>
        <argsstring>(E flag)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Set a flag. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="179" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1adde5305aaee77d68eb4f491ef8c10f6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gf::Flags&lt; E &gt;::reset</definition>
        <argsstring>(E flag)</argsstring>
        <name>reset</name>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Reset a flag. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to reset </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="188" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1a6166a51066228d991f34b27e933704cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgf_1_1_flags_1a264a89d5e519c458d6be4e887f3d903e" kindref="member">Type</ref></type>
        <definition>Type gf::Flags&lt; E &gt;::getValue</definition>
        <argsstring>() const</argsstring>
        <name>getValue</name>
        <briefdescription>
<para>Get the underlying value of the flags. </para>        </briefdescription>
        <detaileddescription>
<para>This function should not be used in normal cases.</para><para><simplesect kind="return"><para>The value of the flags </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="201" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="201" bodyend="203"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgf_1_1_flags_1af573a5a40a3468016498dc5965d9d6ba" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr gf::Flags&lt; E &gt;::Flags</definition>
        <argsstring>(Type data)</argsstring>
        <name>Flags</name>
        <param>
          <type><ref refid="classgf_1_1_flags_1a264a89d5e519c458d6be4e887f3d903e" kindref="member">Type</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="206" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="206" bodyend="210"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classgf_1_1_flags_1a578fc40bf2bc5f6e2f2a73346b01636b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt;</type>
        <definition>constexpr Flags&lt; E &gt; operator|</definition>
        <argsstring>(Flags&lt; E &gt; lhs, E rhs)</argsstring>
        <name>operator|</name>
        <param>
          <type><ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Binary OR between a bitfield and a flag. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitfield </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bitfield with a binary OR of the bitfield and the flag </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="225" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="225" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1a7ff4184dad4d3e3b8061e4d0a8361936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt;</type>
        <definition>constexpr Flags&lt; E &gt; operator|</definition>
        <argsstring>(E lhs, Flags&lt; E &gt; rhs)</argsstring>
        <name>operator|</name>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Binary OR between a flag and a bitfield. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitfield </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bitfield with a binary OR of the flag and the bitfield </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="239" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="239" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1a2864923cdbb543cf11d1b109547d78f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt;</type>
        <definition>constexpr Flags&lt; E &gt; operator &amp;</definition>
        <argsstring>(Flags&lt; E &gt; lhs, E rhs)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type><ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Binary AND between a bitfield and a flag. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitfield </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bitfield with a binary AND of the bitfield and the flag </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="253" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="253" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1a02435f34f5e6a9738654e7c6b643b691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt;</type>
        <definition>constexpr Flags&lt; E &gt; operator &amp;</definition>
        <argsstring>(E lhs, Flags&lt; E &gt; rhs)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Binary AND between a flag and a bitfield. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitfield </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bitfield with a binary AND of the flag and the bitfield </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="267" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="267" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1aeee3d1b4959f81d8b8518389db7acc96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt;</type>
        <definition>constexpr Flags&lt; E &gt; combineFlags</definition>
        <argsstring>(E flag)</argsstring>
        <name>combineFlags</name>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Combine a single enum value into a flag value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>An enum value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The enum value turned into a flag value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="280" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="280" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_flags_1a01f1db7a1a2b0963fd84327a2c5292eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>F</declname>
            <defname>F</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classgf_1_1_flags" kindref="compound">Flags</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref> &gt;</type>
        <definition>constexpr Flags&lt; E &gt; combineFlags</definition>
        <argsstring>(E flag, F ... others)</argsstring>
        <name>combineFlags</name>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a3a3ea00cfc35332cedf6e5e9a32e94da" kindref="member">E</ref></type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626a800618943025315f869e4e1f09471012" kindref="member">F</ref> ...</type>
          <declname>others</declname>
        </param>
        <briefdescription>
<para>Combine several enum values into a flag value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>An enum value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>others</parametername>
</parameternamelist>
<parameterdescription>
<para>The other enum values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The enum values turned into a flag value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="293" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="293" bodyend="295"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Bitfield relying on an enumeration. </para>    </briefdescription>
    <detaileddescription>
<para><programlisting><codeline><highlight class="normal">enum<sp/>class<sp/>AnimalProperties<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>HasClaws<sp/><sp/><sp/><sp/><sp/>=<sp/>0x01,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CanFly<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x02,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EatsFish<sp/><sp/><sp/><sp/><sp/>=<sp/>0x04,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IsEndangered<sp/>=<sp/>0x08,</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>gf<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template&lt;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>EnableBitmaskOperators&lt;AnimalProperties&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>value<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">gf::Flags&lt;AnimalProperties&gt;<sp/>seahawk<sp/>=<sp/>AnimalProperties::CanFly<sp/>|<sp/>AnimalProperties::EatsFish;</highlight></codeline>
<codeline><highlight class="normal">seahawk<sp/>|=<sp/>AnimalProperties::IsEndangered;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>b<sp/>=<sp/>seahawk.test(AnimalProperties::HasClaws);<sp/>//<sp/>false</highlight></codeline>
</programlisting></para><para>If you do not initialize flags, then the state is undefined. You can use semantic constants <ref refid="group__core_1ga21fb73589fe7966a778a8b77ff9f16b8" kindref="member">gf::All</ref> and <ref refid="group__graphics_1gga5229ccbffec1016d760ddfe296fd2edfa6adf97f83acf6453d4a6a4b1070f3754" kindref="member">gf::None</ref> to set all the flags or none.</para><para><programlisting><codeline><highlight class="normal"><ref refid="classgf_1_1_flags" kindref="compound">gf::Flags&lt;AnimalProperties&gt;</ref><sp/>unicorn(<ref refid="group__core_1ga21fb73589fe7966a778a8b77ff9f16b8" kindref="member">gf::All</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classgf_1_1_flags" kindref="compound">gf::Flags&lt;AnimalProperties&gt;</ref><sp/>rat(<ref refid="group__graphics_1gga5229ccbffec1016d760ddfe296fd2edfa6adf97f83acf6453d4a6a4b1070f3754" kindref="member">gf::None</ref>);</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <location file="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" line="68" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Flags.h" bodystart="68" bodyend="213"/>
    <listofallmembers>
      <member refid="classgf_1_1_flags_1aeee3d1b4959f81d8b8518389db7acc96" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>combineFlags</name></member>
      <member refid="classgf_1_1_flags_1a01f1db7a1a2b0963fd84327a2c5292eb" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>combineFlags</name></member>
      <member refid="classgf_1_1_flags_1a39c1256650fe341a78676e14976ed116" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>Flags</name></member>
      <member refid="classgf_1_1_flags_1a15eadb1ca64e2d0b86663b5bb1bd11e3" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>Flags</name></member>
      <member refid="classgf_1_1_flags_1aeb4a6661c9a5800d6b8a0ee0c7d8a25a" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>Flags</name></member>
      <member refid="classgf_1_1_flags_1a0b9c091b5cc8f4d1d534bfcb918b63ab" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>Flags</name></member>
      <member refid="classgf_1_1_flags_1af573a5a40a3468016498dc5965d9d6ba" prot="private" virt="non-virtual"><scope>gf::Flags</scope><name>Flags</name></member>
      <member refid="classgf_1_1_flags_1a6166a51066228d991f34b27e933704cf" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>getValue</name></member>
      <member refid="classgf_1_1_flags_1a3af57a60815a7bf53f925d0a292bafce" prot="private" virt="non-virtual"><scope>gf::Flags</scope><name>m_data</name></member>
      <member refid="classgf_1_1_flags_1aa140280497e96f5372716c8232d81cd1" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>operator &amp;</name></member>
      <member refid="classgf_1_1_flags_1ad1555d20e0d8c89cd990a7e5a6e97938" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>operator &amp;=</name></member>
      <member refid="classgf_1_1_flags_1a2cfcdb3b582a0ab20ed132e432fe607b" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>operator bool</name></member>
      <member refid="classgf_1_1_flags_1a2864923cdbb543cf11d1b109547d78f7" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>operator&amp;</name></member>
      <member refid="classgf_1_1_flags_1a02435f34f5e6a9738654e7c6b643b691" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>operator&amp;</name></member>
      <member refid="classgf_1_1_flags_1a9c270212f03b03d3c7e358caad1ddfe5" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>operator|</name></member>
      <member refid="classgf_1_1_flags_1a578fc40bf2bc5f6e2f2a73346b01636b" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>operator|</name></member>
      <member refid="classgf_1_1_flags_1a7ff4184dad4d3e3b8061e4d0a8361936" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>operator|</name></member>
      <member refid="classgf_1_1_flags_1a9dbcca8fa649ea76c8a461a2bd243c89" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>operator|=</name></member>
      <member refid="classgf_1_1_flags_1a68a5382c456d4591d260ebb96c68f8b3" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>operator~</name></member>
      <member refid="classgf_1_1_flags_1adde5305aaee77d68eb4f491ef8c10f6d" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>reset</name></member>
      <member refid="classgf_1_1_flags_1a7add558107e334c0cfe71893fced16f1" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>set</name></member>
      <member refid="classgf_1_1_flags_1aebb262f6354eaa3af73ea36ce82dcc3b" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>test</name></member>
      <member refid="classgf_1_1_flags_1a264a89d5e519c458d6be4e887f3d903e" prot="public" virt="non-virtual"><scope>gf::Flags</scope><name>Type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
