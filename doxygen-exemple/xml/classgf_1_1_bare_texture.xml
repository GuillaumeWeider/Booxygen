<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgf_1_1_bare_texture" kind="class" language="C++" prot="public">
    <compoundname>gf::BareTexture</compoundname>
    <derivedcompoundref refid="classgf_1_1_alpha_texture" prot="public" virt="non-virtual">gf::AlphaTexture</derivedcompoundref>
    <derivedcompoundref refid="classgf_1_1_texture" prot="public" virt="non-virtual">gf::Texture</derivedcompoundref>
    <includes refid="_texture_8h" local="no">gf/Texture.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classgf_1_1_bare_texture_1aba5939a29c39c87a20b4ae74e95c59e3" prot="public" static="no">
        <name>Format</name>
        <enumvalue id="classgf_1_1_bare_texture_1aba5939a29c39c87a20b4ae74e95c59e3acb5feb1b7314637725a2e73bdc9f7295" prot="public">
          <name>Color</name>
          <briefdescription>
<para>RGBA format. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgf_1_1_bare_texture_1aba5939a29c39c87a20b4ae74e95c59e3a6132295fcf5570fb8b0a944ef322a598" prot="public">
          <name>Alpha</name>
          <briefdescription>
<para>Alpha format. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Format of the texture. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classgf_1_1_bare_texture" kindref="compound">gf::BareTexture</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="74" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" bodystart="74" bodyend="77"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgf_1_1_bare_texture_1ac53ddc7052541703c976f4391f32c447" prot="private" static="no" mutable="no">
        <type><ref refid="classgf_1_1_bare_texture_1aba5939a29c39c87a20b4ae74e95c59e3" kindref="member">Format</ref></type>
        <definition>Format gf::BareTexture::m_format</definition>
        <argsstring></argsstring>
        <name>m_format</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="290" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_bare_texture_1abe6a1d2024613ab2bc7c6692ddc2b1cf" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned gf::BareTexture::m_name</definition>
        <argsstring></argsstring>
        <name>m_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="291" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_bare_texture_1a746e0bd530b55941c2b095691890f6a3" prot="private" static="no" mutable="no">
        <type><ref refid="group__core_1gaccbebb53cb8f06205d648e713ec5d40d" kindref="member">Vector2u</ref></type>
        <definition>Vector2u gf::BareTexture::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="292" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_bare_texture_1ad6ef39da429ef80dcfa739072df561e1" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gf::BareTexture::m_smooth</definition>
        <argsstring></argsstring>
        <name>m_smooth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="293" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_bare_texture_1af144ba4ef59aff69a05bc70a6e19cc0d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gf::BareTexture::m_repeated</definition>
        <argsstring></argsstring>
        <name>m_repeated</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="294" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_bare_texture_1a4b313642871bdd32112eb42a6e6f826a" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gf::BareTexture::m_mipmap</definition>
        <argsstring></argsstring>
        <name>m_mipmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="295" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgf_1_1_bare_texture_1af0338d095a74651505e53f6ef07df5f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gf::BareTexture::BareTexture</definition>
        <argsstring>(Format format)</argsstring>
        <name>BareTexture</name>
        <param>
          <type><ref refid="classgf_1_1_bare_texture_1aba5939a29c39c87a20b4ae74e95c59e3" kindref="member">Format</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format of the texture</para></parameterdescription>
</parameteritem>
</parameterlist>
Once set, the format can not be changed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1a5973dc8f7580398de2b90f824b4d72d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gf::BareTexture::~BareTexture</definition>
        <argsstring>()</argsstring>
        <name>~BareTexture</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1afb1321b7d497a0af42655d872bb32db7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gf::BareTexture::BareTexture</definition>
        <argsstring>(const BareTexture &amp;)=delete</argsstring>
        <name>BareTexture</name>
        <param>
          <type>const <ref refid="classgf_1_1_bare_texture" kindref="compound">BareTexture</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Deleted copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1a4552991d4ed054f9f728e4b2cbc60e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgf_1_1_bare_texture" kindref="compound">BareTexture</ref> &amp;</type>
        <definition>BareTexture&amp; gf::BareTexture::operator=</definition>
        <argsstring>(const BareTexture &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classgf_1_1_bare_texture" kindref="compound">BareTexture</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Deleted copy assignment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1a4db166107e9337fa4369de44758b45e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gf::BareTexture::BareTexture</definition>
        <argsstring>(BareTexture &amp;&amp;other)</argsstring>
        <name>BareTexture</name>
        <param>
          <type><ref refid="classgf_1_1_bare_texture" kindref="compound">BareTexture</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1a44f40465aecce44c8f9b3f870053710a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgf_1_1_bare_texture" kindref="compound">BareTexture</ref> &amp;</type>
        <definition>BareTexture&amp; gf::BareTexture::operator=</definition>
        <argsstring>(BareTexture &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classgf_1_1_bare_texture" kindref="compound">BareTexture</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1a5c719e0fcb28f65a3c3d52e60ab2de95" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgf_1_1_bare_texture_1aba5939a29c39c87a20b4ae74e95c59e3" kindref="member">Format</ref></type>
        <definition>Format gf::BareTexture::getFormat</definition>
        <argsstring>() const</argsstring>
        <name>getFormat</name>
        <briefdescription>
<para>Get the format of the texture. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The format of the texture </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="118" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1a3f98880e7ad13968b80c570a96f251bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned gf::BareTexture::getName</definition>
        <argsstring>() const</argsstring>
        <name>getName</name>
        <briefdescription>
<para>Get the internal representation of the texture. </para>        </briefdescription>
        <detaileddescription>
<para>This function is for internal use only.</para><para><simplesect kind="return"><para>The OpenGL name of the texture </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="129" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" bodystart="129" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1a8d05c2de026e2c15423f22f4155ac23d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__core_1gaccbebb53cb8f06205d648e713ec5d40d" kindref="member">Vector2u</ref></type>
        <definition>Vector2u gf::BareTexture::getSize</definition>
        <argsstring>() const</argsstring>
        <name>getSize</name>
        <briefdescription>
<para>Return the size of the texture. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Size in pixels </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="138" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1a92130ad8a7d9f530c15418f9188c95ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gf::BareTexture::setSmooth</definition>
        <argsstring>(bool smooth=true)</argsstring>
        <name>setSmooth</name>
        <param>
          <type>bool</type>
          <declname>smooth</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Enable or disable the smooth filter. </para>        </briefdescription>
        <detaileddescription>
<para>When the filter is activated, the texture appears smoother so that pixels are less noticeable. However if you want the texture to look exactly the same as its source file, you should leave it disabled.</para><para>The smooth filter is disabled by default.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smooth</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable smoothing, false to disable it</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classgf_1_1_bare_texture_1ae3cb1cf572a84531a1e8e70d6a67777b" kindref="member">isSmooth()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1ae3cb1cf572a84531a1e8e70d6a67777b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool gf::BareTexture::isSmooth</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isSmooth</name>
        <briefdescription>
<para>Check if the smooth filter is enabled or not. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if smoothing is enabled, false if it is disabled</para></simplesect>
<simplesect kind="see"><para><ref refid="classgf_1_1_bare_texture_1a92130ad8a7d9f530c15418f9188c95ee" kindref="member">setSmooth()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="165" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1a34860c67cf5bd39b7d04d290ecee427c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gf::BareTexture::setRepeated</definition>
        <argsstring>(bool repeated=true)</argsstring>
        <name>setRepeated</name>
        <param>
          <type>bool</type>
          <declname>repeated</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Enable or disable repeating. </para>        </briefdescription>
        <detaileddescription>
<para>Repeating is involved when using texture coordinates outside the texture rectangle <formula id="87">$ [0, 1] @times [0, 1] $</formula>. In this case, if repeat mode is enabled, the whole texture will be repeated as many times as needed to reach the coordinate (for example, if the <formula id="88">$ u $</formula> texture coordinate is 3, the texture will be repeated 3 times).</para><para>If repeat mode is disabled, the &quot;extra space&quot; will instead be filled with border pixels.</para><para>Repeating is disabled by default.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>repeated</parametername>
</parameternamelist>
<parameterdescription>
<para>True to repeat the texture, false to disable repeating</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classgf_1_1_bare_texture_1aeb2ec79e47a8548775eca60fa9ab5ca6" kindref="member">isRepeated()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1aeb2ec79e47a8548775eca60fa9ab5ca6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool gf::BareTexture::isRepeated</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isRepeated</name>
        <briefdescription>
<para>Check if the texture is repeated or not. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if repeat mode is enabled, false if it is disabled</para></simplesect>
<simplesect kind="see"><para><ref refid="classgf_1_1_bare_texture_1a34860c67cf5bd39b7d04d290ecee427c" kindref="member">setRepeated()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="197" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" bodystart="197" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1aa601abc5feec107d624fba1fe867d484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gf::BareTexture::update</definition>
        <argsstring>(const uint8_t *data)</argsstring>
        <name>update</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Update the whole texture from an array of pixels. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>data</computeroutput> array is assumed to be in the right format (4 channels for colored texture and 1 channel for alpha texture) and have the right size.</para><para>No additional check is performed on the size of the pixel array, passing invalid arguments will lead to an undefined behavior.</para><para>This function does nothing if <computeroutput>data</computeroutput> is <computeroutput>nullptr</computeroutput> or if the texture was not previously created.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of pixels to copy to the texture </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1af482a584253838c378e893785133bab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gf::BareTexture::update</definition>
        <argsstring>(const uint8_t *data, const RectU &amp;rect)</argsstring>
        <name>update</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="group__core_1ga1831a8313850243834b07340b4e3b22c" kindref="member">RectU</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Update a part of the texture from an array of pixels. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>data</computeroutput> array is assumed to be in the right format (4 channels for colored texture and 1 channel for alpha texture) and its size must match the size of the <computeroutput>rect</computeroutput> argument.</para><para>No additional check is performed on the size of the pixel array or the bounds of the area to update, passing invalid arguments will lead to an undefined behavior.</para><para>This function does nothing if <computeroutput>data</computeroutput> is <computeroutput>nullptr</computeroutput> or if the texture was not previously created.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of pixels to copy to the texture </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The region of the texture to update </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1aaa8072ea8cb3e77c430786c02a4cd383" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__core_1gac3887a7df16895871374b04d9f6cb961" kindref="member">RectF</ref></type>
        <definition>RectF gf::BareTexture::computeTextureCoords</definition>
        <argsstring>(const RectU &amp;rect) const</argsstring>
        <name>computeTextureCoords</name>
        <param>
          <type>const <ref refid="group__core_1ga1831a8313850243834b07340b4e3b22c" kindref="member">RectU</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Compute normalized texture coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangle in the texture, in pixels </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Normalized texture coordinates </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_bare_texture_1a303a01f6bd42fde0a6cae9787f66565c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gf::BareTexture::generateMipmap</definition>
        <argsstring>()</argsstring>
        <name>generateMipmap</name>
        <briefdescription>
<para>Generate a mipmap using the current texture data. </para>        </briefdescription>
        <detaileddescription>
<para>Mipmaps are pre-computed chains of optimized textures. Each level of texture in a mipmap is generated by halving each of the previous level&apos;s dimensions. This is done until the final level has the size of 1x1. The textures generated in this process may make use of more advanced filters which might improve the visual quality of textures when they are applied to objects much smaller than they are. This is known as minification. Because fewer texels (texture elements) have to be sampled from when heavily minified, usage of mipmaps can also improve rendering performance in certain scenarios.</para><para>Mipmap data is only valid from the time it is generated until the next time the base level image is modified, at which point this function will have to be called again to regenerate it.</para><para><simplesect kind="return"><para>True if mipmap generation was successful, false if unsuccessful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="265" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgf_1_1_bare_texture_1ae0a5581f2c93ff3029e14e3cbac72471" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gf::BareTexture::bind</definition>
        <argsstring>(const BareTexture *texture)</argsstring>
        <name>bind</name>
        <param>
          <type>const <ref refid="classgf_1_1_bare_texture" kindref="compound">BareTexture</ref> *</type>
          <declname>texture</declname>
        </param>
        <briefdescription>
<para>Bind a texture for rendering. </para>        </briefdescription>
        <detaileddescription>
<para>This function is for internal use only.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the texture to bind, can be <computeroutput>nullptr</computeroutput> to use no texture </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="274" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classgf_1_1_bare_texture_1a9822c02c7010d2261673e9da58229a8f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gf::BareTexture::create</definition>
        <argsstring>(Vector2u size, const uint8_t *data)</argsstring>
        <name>create</name>
        <param>
          <type><ref refid="group__core_1gaccbebb53cb8f06205d648e713ec5d40d" kindref="member">Vector2u</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Create the texture. </para>        </briefdescription>
        <detaileddescription>
<para>If this function fails, the texture is left unchanged.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the texture </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial pixels of the texture (can be <computeroutput>nullptr</computeroutput>)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if creation was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="287" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An image that lives in the graphic memory that can be used for drawing. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="classgf_1_1_bare_texture" kindref="compound">gf::BareTexture</ref> stores pixels that can be drawn, with a sprite for example. A texture lives in the graphics card memory, therefore it is very fast to draw a texture to a render target, or copy a render target to a texture (the graphics card can access both directly).</para><para>Being stored in the graphics card memory has some drawbacks. A texture cannot be manipulated as freely as a <ref refid="classgf_1_1_image" kindref="compound">gf::Image</ref>, you need to prepare the pixels first and then upload them to the texture in a single operation (see <ref refid="classgf_1_1_bare_texture_1aa601abc5feec107d624fba1fe867d484" kindref="member">BareTexture::update()</ref>).</para><para><ref refid="classgf_1_1_bare_texture" kindref="compound">gf::BareTexture</ref> can handle two types of texture:</para><para><itemizedlist>
<listitem><para>colored texture that stores RGBA channels (see <ref refid="classgf_1_1_texture" kindref="compound">gf::Texture</ref>)</para></listitem><listitem><para>alpha texture that stores a single alpha channel (see <ref refid="classgf_1_1_alpha_texture" kindref="compound">gf::AlphaTexture</ref>)</para></listitem></itemizedlist>
</para><para>Generally, you do not manipulate a <ref refid="classgf_1_1_bare_texture" kindref="compound">gf::BareTexture</ref> directly but you can use a <ref refid="classgf_1_1_texture" kindref="compound">gf::Texture</ref>.</para><para><simplesect kind="see"><para><ref refid="classgf_1_1_texture" kindref="compound">gf::Texture</ref>, <ref refid="classgf_1_1_alpha_texture" kindref="compound">gf::AlphaTexture</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="56">
        <label>gf::Texture</label>
        <link refid="classgf_1_1_texture"/>
        <childnode refid="54" relation="public-inheritance">
        </childnode>
      </node>
      <node id="55">
        <label>gf::AlphaTexture</label>
        <link refid="classgf_1_1_alpha_texture"/>
        <childnode refid="54" relation="public-inheritance">
        </childnode>
      </node>
      <node id="54">
        <label>gf::BareTexture</label>
        <link refid="classgf_1_1_bare_texture"/>
      </node>
    </inheritancegraph>
    <location file="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" line="67" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Texture.h" bodystart="67" bodyend="296"/>
    <listofallmembers>
      <member refid="classgf_1_1_bare_texture_1af0338d095a74651505e53f6ef07df5f0" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>BareTexture</name></member>
      <member refid="classgf_1_1_bare_texture_1afb1321b7d497a0af42655d872bb32db7" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>BareTexture</name></member>
      <member refid="classgf_1_1_bare_texture_1a4db166107e9337fa4369de44758b45e4" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>BareTexture</name></member>
      <member refid="classgf_1_1_bare_texture_1ae0a5581f2c93ff3029e14e3cbac72471" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>bind</name></member>
      <member refid="classgf_1_1_bare_texture_1aaa8072ea8cb3e77c430786c02a4cd383" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>computeTextureCoords</name></member>
      <member refid="classgf_1_1_bare_texture_1a9822c02c7010d2261673e9da58229a8f" prot="protected" virt="non-virtual"><scope>gf::BareTexture</scope><name>create</name></member>
      <member refid="classgf_1_1_bare_texture_1aba5939a29c39c87a20b4ae74e95c59e3" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>Format</name></member>
      <member refid="classgf_1_1_bare_texture_1a303a01f6bd42fde0a6cae9787f66565c" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>generateMipmap</name></member>
      <member refid="classgf_1_1_bare_texture_1a5c719e0fcb28f65a3c3d52e60ab2de95" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>getFormat</name></member>
      <member refid="classgf_1_1_bare_texture_1a3f98880e7ad13968b80c570a96f251bb" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>getName</name></member>
      <member refid="classgf_1_1_bare_texture_1a8d05c2de026e2c15423f22f4155ac23d" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>getSize</name></member>
      <member refid="classgf_1_1_bare_texture_1aeb2ec79e47a8548775eca60fa9ab5ca6" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>isRepeated</name></member>
      <member refid="classgf_1_1_bare_texture_1ae3cb1cf572a84531a1e8e70d6a67777b" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>isSmooth</name></member>
      <member refid="classgf_1_1_bare_texture_1ac53ddc7052541703c976f4391f32c447" prot="private" virt="non-virtual"><scope>gf::BareTexture</scope><name>m_format</name></member>
      <member refid="classgf_1_1_bare_texture_1a4b313642871bdd32112eb42a6e6f826a" prot="private" virt="non-virtual"><scope>gf::BareTexture</scope><name>m_mipmap</name></member>
      <member refid="classgf_1_1_bare_texture_1abe6a1d2024613ab2bc7c6692ddc2b1cf" prot="private" virt="non-virtual"><scope>gf::BareTexture</scope><name>m_name</name></member>
      <member refid="classgf_1_1_bare_texture_1af144ba4ef59aff69a05bc70a6e19cc0d" prot="private" virt="non-virtual"><scope>gf::BareTexture</scope><name>m_repeated</name></member>
      <member refid="classgf_1_1_bare_texture_1a746e0bd530b55941c2b095691890f6a3" prot="private" virt="non-virtual"><scope>gf::BareTexture</scope><name>m_size</name></member>
      <member refid="classgf_1_1_bare_texture_1ad6ef39da429ef80dcfa739072df561e1" prot="private" virt="non-virtual"><scope>gf::BareTexture</scope><name>m_smooth</name></member>
      <member refid="classgf_1_1_bare_texture_1a4552991d4ed054f9f728e4b2cbc60e15" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>operator=</name></member>
      <member refid="classgf_1_1_bare_texture_1a44f40465aecce44c8f9b3f870053710a" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>operator=</name></member>
      <member refid="classgf_1_1_bare_texture_1a34860c67cf5bd39b7d04d290ecee427c" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>setRepeated</name></member>
      <member refid="classgf_1_1_bare_texture_1a92130ad8a7d9f530c15418f9188c95ee" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>setSmooth</name></member>
      <member refid="classgf_1_1_bare_texture_1aa601abc5feec107d624fba1fe867d484" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>update</name></member>
      <member refid="classgf_1_1_bare_texture_1af482a584253838c378e893785133bab7" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>update</name></member>
      <member refid="classgf_1_1_bare_texture_1a5973dc8f7580398de2b90f824b4d72d3" prot="public" virt="non-virtual"><scope>gf::BareTexture</scope><name>~BareTexture</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
