<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgf_1_1_render_states" kind="struct" language="C++" prot="public">
    <compoundname>gf::RenderStates</compoundname>
    <includes refid="_render_states_8h" local="no">gf/RenderStates.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgf_1_1_render_states_1a0d21932a5e5fbf03c65963afc2e28c39" prot="public" static="no" mutable="no">
        <type><ref refid="structgf_1_1_blend_mode" kindref="compound">BlendMode</ref></type>
        <definition>BlendMode gf::RenderStates::mode</definition>
        <argsstring></argsstring>
        <name>mode</name>
        <initializer>= <ref refid="group__graphics_1ga1fa131411a6a7f3bf3827e46fecc316f" kindref="member">BlendAlpha</ref></initializer>
        <briefdescription>
<para>The blending mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/RenderStates.h" line="83" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/RenderStates.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgf_1_1_render_states_1a8ebe53edcc7e0d84865a47a41a1f30d0" prot="public" static="no" mutable="no">
        <type><ref refid="group__core_1gae702e6021057443ca43f94b32618bbc2" kindref="member">Matrix3f</ref></type>
        <definition>Matrix3f gf::RenderStates::transform</definition>
        <argsstring></argsstring>
        <name>transform</name>
        <initializer>= <ref refid="group__core_1ga6dda386c75e98622d0c0759c5284afc4" kindref="member">identityTransform</ref>()</initializer>
        <briefdescription>
<para>The transform matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/RenderStates.h" line="84" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/RenderStates.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgf_1_1_render_states_1a9e118f46b7e520ad9eb4ea0b9bdbff4d" prot="public" static="no" mutable="no">
        <type>const <ref refid="classgf_1_1_bare_texture" kindref="compound">BareTexture</ref> *</type>
        <definition>const BareTexture* gf::RenderStates::texture</definition>
        <argsstring></argsstring>
        <name>texture</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>The texture. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/RenderStates.h" line="85" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/RenderStates.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgf_1_1_render_states_1a38b5fe28cff8f7760bbb9904e3a13f11" prot="public" static="no" mutable="no">
        <type><ref refid="classgf_1_1_shader" kindref="compound">Shader</ref> *</type>
        <definition>Shader* gf::RenderStates::shader</definition>
        <argsstring></argsstring>
        <name>shader</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>The shader. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/RenderStates.h" line="86" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/RenderStates.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgf_1_1_render_states_1a991bdf53fea2fc3cb6cd4b20995856b6" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float gf::RenderStates::lineWidth</definition>
        <argsstring></argsstring>
        <name>lineWidth</name>
        <initializer>= 0.0f</initializer>
        <briefdescription>
<para>The line width. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/RenderStates.h" line="87" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/RenderStates.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="group__graphics_1gafcaee43a461682ade9b7fa4c6db75e51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const RenderStates &amp;lhs, const RenderStates &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgf_1_1_render_states" kindref="compound">RenderStates</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structgf_1_1_render_states" kindref="compound">RenderStates</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Check render states equality. </para>        </briefdescription>
        <detaileddescription>
<para>Two render states are equals if their blend mode, their transform matrix, their texture and their shader are the same. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/RenderStates.h" line="99" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/RenderStates.h" bodystart="99" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Define the states used for drawing to a <ref refid="classgf_1_1_render_target" kindref="compound">RenderTarget</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>There are four global states that can be applied to the drawn objects:</para><para><itemizedlist>
<listitem><para>the blending mode: how pixels of the object are blended with the background</para></listitem><listitem><para>the transform matrix: how the object is positioned/rotated/scaled</para></listitem><listitem><para>the texture: what image is mapped to the object</para></listitem><listitem><para>the shader: what custom effect is applied to the object</para></listitem></itemizedlist>
</para><para>High-level objects such as sprites or text force some of these states when they are drawn. For example, a sprite will set its own texture, so that you don&apos;t have to care about it when drawing the sprite.</para><para>The transform is a special case: sprites, texts and shapes (and it&apos;s a good idea to do it with your own drawable classes too) combine their transform with the one that is passed in the <ref refid="structgf_1_1_render_states" kindref="compound">gf::RenderStates</ref> structure. So that you can use a &quot;global&quot; transform on top of each object&apos;s transform.</para><para>Most objects, especially high-level drawables, can be drawn directly without defining render states explicitly <ndash/> the default set of states is ok in most cases.</para><para><programlisting><codeline><highlight class="normal">window.draw(sprite);</highlight></codeline>
</programlisting></para><para>When you&apos;re inside the <computeroutput>draw()</computeroutput> function of a drawable object (inherited from <ref refid="classgf_1_1_drawable" kindref="compound">gf::Drawable</ref>), you can either pass the render states unmodified, or change some of them.</para><para>For example, a transformable object will combine the current transform with its own transform. A sprite will set its texture. Etc.</para><para><simplesect kind="see"><para><ref refid="classgf_1_1_render_target" kindref="compound">gf::RenderTarget</ref>, <ref refid="classgf_1_1_drawable" kindref="compound">gf::Drawable</ref> </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="626">
        <label>gf::RenderStates</label>
        <link refid="structgf_1_1_render_states"/>
        <childnode refid="627" relation="usage">
          <edgelabel>mode</edgelabel>
        </childnode>
        <childnode refid="628" relation="usage">
          <edgelabel>shader</edgelabel>
        </childnode>
        <childnode refid="629" relation="usage">
          <edgelabel>texture</edgelabel>
        </childnode>
        <childnode refid="630" relation="usage">
          <edgelabel>transform</edgelabel>
        </childnode>
      </node>
      <node id="628">
        <label>gf::Shader</label>
        <link refid="classgf_1_1_shader"/>
      </node>
      <node id="630">
        <label>gf::Matrix&lt; float, 3, 3 &gt;</label>
        <link refid="structgf_1_1_matrix"/>
      </node>
      <node id="627">
        <label>gf::BlendMode</label>
        <link refid="structgf_1_1_blend_mode"/>
      </node>
      <node id="629">
        <label>gf::BareTexture</label>
        <link refid="classgf_1_1_bare_texture"/>
      </node>
    </collaborationgraph>
    <location file="/home/jbernard/Workshop/gf/versions/include/gf/RenderStates.h" line="82" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/RenderStates.h" bodystart="82" bodyend="88"/>
    <listofallmembers>
      <member refid="structgf_1_1_render_states_1a991bdf53fea2fc3cb6cd4b20995856b6" prot="public" virt="non-virtual"><scope>gf::RenderStates</scope><name>lineWidth</name></member>
      <member refid="structgf_1_1_render_states_1a0d21932a5e5fbf03c65963afc2e28c39" prot="public" virt="non-virtual"><scope>gf::RenderStates</scope><name>mode</name></member>
      <member refid="group__graphics_1gafcaee43a461682ade9b7fa4c6db75e51" prot="public" virt="non-virtual"><scope>gf::RenderStates</scope><name>operator==</name></member>
      <member refid="structgf_1_1_render_states_1a38b5fe28cff8f7760bbb9904e3a13f11" prot="public" virt="non-virtual"><scope>gf::RenderStates</scope><name>shader</name></member>
      <member refid="structgf_1_1_render_states_1a9e118f46b7e520ad9eb4ea0b9bdbff4d" prot="public" virt="non-virtual"><scope>gf::RenderStates</scope><name>texture</name></member>
      <member refid="structgf_1_1_render_states_1a8ebe53edcc7e0d84865a47a41a1f30d0" prot="public" virt="non-virtual"><scope>gf::RenderStates</scope><name>transform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
