<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgf_1_1_rect" kind="struct" language="C++" prot="public">
    <compoundname>gf::Rect</compoundname>
    <includes refid="_rect_8h" local="no">gf/Rect.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgf_1_1_rect_1a01a96ece737f758b04a6bcca8327ab34" prot="public" static="no" mutable="no">
        <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref></type>
        <definition>T gf::Rect&lt; T &gt;::left</definition>
        <argsstring></argsstring>
        <name>left</name>
        <briefdescription>
<para>Left coordinate of the rectangle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="94" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgf_1_1_rect_1a7f22a584e99f994a50c8b491225401c9" prot="public" static="no" mutable="no">
        <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref></type>
        <definition>T gf::Rect&lt; T &gt;::top</definition>
        <argsstring></argsstring>
        <name>top</name>
        <briefdescription>
<para>Top coordinate of the rectangle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="95" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgf_1_1_rect_1a34b78b7578c5b451db327102e33c7fc5" prot="public" static="no" mutable="no">
        <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref></type>
        <definition>T gf::Rect&lt; T &gt;::width</definition>
        <argsstring></argsstring>
        <name>width</name>
        <briefdescription>
<para>Width of the rectangle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="96" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgf_1_1_rect_1a59b831108fcd75671d9267fefa45d280" prot="public" static="no" mutable="no">
        <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref></type>
        <definition>T gf::Rect&lt; T &gt;::height</definition>
        <argsstring></argsstring>
        <name>height</name>
        <briefdescription>
<para>Height of the rectangle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="97" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgf_1_1_rect_1a708278f513d42dd1874006b5ba1268cb" prot="public" static="no" mutable="no">
        <type><ref refid="structgf_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref>, 2 &gt;</type>
        <definition>Vector&lt;T, 2&gt; gf::Rect&lt; T &gt;::position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <briefdescription>
<para>Position of the rectangle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="100" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgf_1_1_rect_1af73c86b1f9f81892b6a8e59e749790c4" prot="public" static="no" mutable="no">
        <type><ref refid="structgf_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref>, 2 &gt;</type>
        <definition>Vector&lt;T, 2&gt; gf::Rect&lt; T &gt;::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
<para>Size of the rectangle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="101" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgf_1_1_rect_1ae54e51b431be2a560076ebb6959f412f" prot="public" static="no" mutable="no">
        <type>union gf::Rect::@16</type>
        <definition>union gf::Rect::@16 gf::Rect&lt; T &gt;::@17</definition>
        <argsstring></argsstring>
        <name>@17</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An anonymous union to handle the various representations </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="103" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgf_1_1_rect_1a774fe0d26aabd14a3106328872c7de98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr gf::Rect&lt; T &gt;::Rect</definition>
        <argsstring>() noexcept</argsstring>
        <name>Rect</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Creates an empty rectangle (it is equivalent to calling <computeroutput>Rect(0, 0, 0, 0)</computeroutput>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="111" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a4e79c1503c8116f59a650b21a050b126" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr gf::Rect&lt; T &gt;::Rect</definition>
        <argsstring>(T rectLeft, T rectTop, T rectWidth, T rectHeight) noexcept</argsstring>
        <name>Rect</name>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref></type>
          <declname>rectLeft</declname>
        </param>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref></type>
          <declname>rectTop</declname>
        </param>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref></type>
          <declname>rectWidth</declname>
        </param>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref></type>
          <declname>rectHeight</declname>
        </param>
        <briefdescription>
<para>Construct the rectangle from its coordinates. </para>        </briefdescription>
        <detaileddescription>
<para>Be careful, the last two parameters are the width and height, not the right and bottom coordinates!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rectLeft</parametername>
</parameternamelist>
<parameterdescription>
<para>Left coordinate of the rectangle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rectTop</parametername>
</parameternamelist>
<parameterdescription>
<para>Top coordinate of the rectangle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rectWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the rectangle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rectHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the rectangle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="128" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="128" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a82a329acf5b682d3da5bc50e09f3a31f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gf::Rect&lt; T &gt;::Rect</definition>
        <argsstring>(const Vector&lt; T, 2 &gt; &amp;rectPosition, const Vector&lt; T, 2 &gt; &amp;rectSize) noexcept</argsstring>
        <name>Rect</name>
        <param>
          <type>const <ref refid="structgf_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref>, 2 &gt; &amp;</type>
          <declname>rectPosition</declname>
        </param>
        <param>
          <type>const <ref refid="structgf_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref>, 2 &gt; &amp;</type>
          <declname>rectSize</declname>
        </param>
        <briefdescription>
<para>Construct the rectangle from position and size. </para>        </briefdescription>
        <detaileddescription>
<para>Be careful, the last parameter is the size, not the bottom-right corner!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rectPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the top left corner of the rectangle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rectSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the rectangle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="143" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="143" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a3526a4e0e8ebd90bd492474cbb8ba5bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structgf_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref>, 2 &gt;</type>
        <definition>constexpr Vector&lt;T, 2&gt; gf::Rect&lt; T &gt;::getPosition</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getPosition</name>
        <briefdescription>
<para>Get the position of the rectangle. </para>        </briefdescription>
        <detaileddescription>
<para>It is a synonym for the <computeroutput>position</computeroutput> member</para><para><simplesect kind="return"><para>The position of the rectangle </para></simplesect>
<simplesect kind="see"><para><ref refid="structgf_1_1_rect_1a9dc25fbaa2ae8677c54850e95d3778d8" kindref="member">getSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="157" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a9dc25fbaa2ae8677c54850e95d3778d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structgf_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref>, 2 &gt;</type>
        <definition>constexpr Vector&lt;T, 2&gt; gf::Rect&lt; T &gt;::getSize</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getSize</name>
        <briefdescription>
<para>Get the size of the rectangle. </para>        </briefdescription>
        <detaileddescription>
<para>It is a synonym for the <computeroutput>size</computeroutput> member</para><para><simplesect kind="return"><para>The size of the rectangle </para></simplesect>
<simplesect kind="see"><para><ref refid="structgf_1_1_rect_1a3526a4e0e8ebd90bd492474cbb8ba5bb" kindref="member">getPosition()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="169" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1ad1547ba47e53250eb20b65ede56dbd40" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool gf::Rect&lt; T &gt;::isEmpty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isEmpty</name>
        <briefdescription>
<para>Check if the rectangle is empty. </para>        </briefdescription>
        <detaileddescription>
<para>An empty rectangle is a rectangle that has one of its size coordinates that is zero.</para><para><simplesect kind="return"><para>True if the rectangle is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="181" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="181" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a820b61d051e5b28c23fc0a8a4f744319" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structgf_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref>, 2 &gt;</type>
        <definition>constexpr Vector&lt;T, 2&gt; gf::Rect&lt; T &gt;::getCenter</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getCenter</name>
        <briefdescription>
<para>Get the center of the rectangle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The center of the rectangle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="190" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a57909f8f3223e9fb61270c50e09168cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structgf_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref>, 2 &gt;</type>
        <definition>constexpr Vector&lt;T, 2&gt; gf::Rect&lt; T &gt;::getTopLeft</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getTopLeft</name>
        <briefdescription>
<para>Get the top left corner. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The top left corner </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="199" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a624ceef6cb53228f88e8730d54ae7776" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structgf_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref>, 2 &gt;</type>
        <definition>constexpr Vector&lt;T, 2&gt; gf::Rect&lt; T &gt;::getTopRight</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getTopRight</name>
        <briefdescription>
<para>Get the top right corner. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The top right corner </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="208" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a8b1ec8c4c9ff0c473e8bac6775bc9cbc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structgf_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref>, 2 &gt;</type>
        <definition>constexpr Vector&lt;T, 2&gt; gf::Rect&lt; T &gt;::getBottomLeft</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBottomLeft</name>
        <briefdescription>
<para>Get the bottom left corner. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The bottom left corner </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="217" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="217" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a7a6b806b739329c57e4af1bf38104a85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structgf_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref>, 2 &gt;</type>
        <definition>constexpr Vector&lt;T, 2&gt; gf::Rect&lt; T &gt;::getBottomRight</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBottomRight</name>
        <briefdescription>
<para>Get the bottom right corner. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The bottom right corner </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="226" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a7b9510137dd4a01702ba4aeb50adc16b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool gf::Rect&lt; T &gt;::contains</definition>
        <argsstring>(const Vector&lt; T, 2 &gt; &amp;point) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="structgf_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref>, 2 &gt; &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Check if a point is inside the rectangle&apos;s area. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Point to test </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the point is inside, false otherwise </para></simplesect>
<simplesect kind="see"><para><ref refid="structgf_1_1_rect_1a7fc95ee96635c5cc9aaa1aed9dfe3653" kindref="member">intersects()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="238" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a898f0e3f5b7f72e01e48fd6d5b3b3ddb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool gf::Rect&lt; T &gt;::contains</definition>
        <argsstring>(const Rect&lt; T &gt; &amp;other) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="structgf_1_1_rect" kindref="compound">Rect</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Check if a rectangle is inside the rectangle&apos;s area. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle to test </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the rectangle is inside, false otherwise </para></simplesect>
<simplesect kind="see"><para><ref refid="structgf_1_1_rect_1a7fc95ee96635c5cc9aaa1aed9dfe3653" kindref="member">intersects()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="249" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a7fc95ee96635c5cc9aaa1aed9dfe3653" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool gf::Rect&lt; T &gt;::intersects</definition>
        <argsstring>(const Rect&lt; T &gt; &amp;other) const noexcept</argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="structgf_1_1_rect" kindref="compound">Rect</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Check the intersection between two rectangles. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle to test </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if rectangles overlap, false otherwise </para></simplesect>
<simplesect kind="see"><para><ref refid="structgf_1_1_rect_1a7b9510137dd4a01702ba4aeb50adc16b" kindref="member">contains()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="261" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1ad6a10f923f3ca3258f99752eef40d98d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool gf::Rect&lt; T &gt;::intersects</definition>
        <argsstring>(const Rect&lt; T &gt; &amp;other, Rect&lt; T &gt; &amp;result) const noexcept</argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="structgf_1_1_rect" kindref="compound">Rect</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="structgf_1_1_rect" kindref="compound">Rect</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref> &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Check the intersection between two rectangles. </para>        </briefdescription>
        <detaileddescription>
<para>This overload returns the overlapped rectangle in the <computeroutput>result</computeroutput> parameter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle to be filled with the intersection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if rectangles overlap, false otherwise </para></simplesect>
<simplesect kind="see"><para><ref refid="structgf_1_1_rect_1a7b9510137dd4a01702ba4aeb50adc16b" kindref="member">contains</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="277" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="277" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a05fb42f7b0d58e1d6f750d4a8406861f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structgf_1_1_rect" kindref="compound">Rect</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref> &gt;</type>
        <definition>constexpr Rect&lt;T&gt; gf::Rect&lt; T &gt;::extend</definition>
        <argsstring>(T value) const noexcept</argsstring>
        <name>extend</name>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Extend the rectangle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount to extend </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new extended rectangle </para></simplesect>
<simplesect kind="see"><para><ref refid="structgf_1_1_rect_1a4ca7bb6409150f809d79baf98d83d1a0" kindref="member">shrink()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="299" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="299" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a4ca7bb6409150f809d79baf98d83d1a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structgf_1_1_rect" kindref="compound">Rect</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref> &gt;</type>
        <definition>constexpr Rect&lt;T&gt; gf::Rect&lt; T &gt;::shrink</definition>
        <argsstring>(T value) const noexcept</argsstring>
        <name>shrink</name>
        <param>
          <type><ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Shrink the rectangle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount to shrink </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new shrinked rectangle </para></simplesect>
<simplesect kind="see"><para><ref refid="structgf_1_1_rect_1a05fb42f7b0d58e1d6f750d4a8406861f" kindref="member">extend()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="310" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="310" bodyend="312"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="structgf_1_1_rect_1a2b38f77ccdaf66aed571fe18e09d08bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Rect&lt; T &gt; &amp;lhs, const Rect&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgf_1_1_rect" kindref="compound">Rect</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref> &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structgf_1_1_rect" kindref="compound">Rect</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref> &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Equality operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>First rectangle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Second rectangle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the two rectangles are the same </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="364" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="364" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="structgf_1_1_rect_1a590fe9be9de875b208062066f5f86245" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Rect&lt; T &gt; &amp;lhs, const Rect&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgf_1_1_rect" kindref="compound">Rect</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref> &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structgf_1_1_rect" kindref="compound">Rect</ref>&lt; <ref refid="group__window_1gga795d7d5e2f2a4f38b16b95e0e78cb626ab9ece18c950afbfa6b0fdbfa4ff731d3" kindref="member">T</ref> &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Inequality operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>First rectangle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Second rectangle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the two rectangles are different </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="378" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="378" bodyend="380"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Utility class for manipulating 2D axis aligned rectangles. </para>    </briefdescription>
    <detaileddescription>
<para>A rectangle is defined by its top-left corner and its size. It is a very simple class defined for convenience, so its member variables (<computeroutput>left</computeroutput>, <computeroutput>top</computeroutput>, <computeroutput>width</computeroutput> and <computeroutput>height</computeroutput>) are public and can be accessed directly. You can also access the <computeroutput>position</computeroutput> and the <computeroutput>size</computeroutput> of the rectangle directly as <ref refid="structgf_1_1_vector" kindref="compound">gf::Vector</ref>.</para><para><ref refid="structgf_1_1_rect" kindref="compound">gf::Rect</ref> uses the usual rules for its boundaries:</para><para><itemizedlist>
<listitem><para>The left and top edges are included in the rectangle&apos;s area</para></listitem><listitem><para>The right (left + width) and bottom (top + height) edges are excluded from the rectangle&apos;s area</para></listitem></itemizedlist>
</para><para>This means that gf::RectI(0, 0, 1, 1) and gf::RectI(1, 1, 1, 1) don&apos;t intersect.</para><para><ref refid="structgf_1_1_rect" kindref="compound">gf::Rect</ref> is a template and may be used with any numeric type, but for simplicity, some common typedef are defined:</para><para><itemizedlist>
<listitem><para><ref refid="group__core_1ga2e3cde0dd67f7db84ca4e8ba9ce1fa64" kindref="member">gf::RectI</ref> with <computeroutput>int</computeroutput> as <computeroutput>T</computeroutput></para></listitem><listitem><para><ref refid="group__core_1ga1831a8313850243834b07340b4e3b22c" kindref="member">gf::RectU</ref> with <computeroutput>unsigned</computeroutput> as <computeroutput>T</computeroutput></para></listitem><listitem><para><ref refid="group__core_1ga191f0ccd444b49e33703af54a9296a51" kindref="member">gf::RectZ</ref> with <computeroutput>std::size_t</computeroutput> as <computeroutput>T</computeroutput></para></listitem><listitem><para><ref refid="group__core_1gac3887a7df16895871374b04d9f6cb961" kindref="member">gf::RectF</ref> with <computeroutput>float</computeroutput> as <computeroutput>T</computeroutput></para></listitem></itemizedlist>
</para><para>So that you don&apos;t have to care about the template syntax.</para><para>Usage example:</para><para><programlisting><codeline><highlight class="comment">//<sp/>Define<sp/>a<sp/>rectangle,<sp/>located<sp/>at<sp/>(0,<sp/>0)<sp/>with<sp/>a<sp/>size<sp/>of<sp/>20x5</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structgf_1_1_rect" kindref="compound">gf::RectI</ref><sp/>r1(0,<sp/>0,<sp/>20,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>another<sp/>rectangle,<sp/>located<sp/>at<sp/>(4,<sp/>2)<sp/>with<sp/>a<sp/>size<sp/>of<sp/>18x10</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structgf_1_1_vector" kindref="compound">gf::Vector2i</ref><sp/><ref refid="structgf_1_1_rect_1a708278f513d42dd1874006b5ba1268cb" kindref="member">position</ref>(4,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="structgf_1_1_vector" kindref="compound">gf::Vector2i</ref><sp/><ref refid="structgf_1_1_rect_1af73c86b1f9f81892b6a8e59e749790c4" kindref="member">size</ref>(18,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="structgf_1_1_rect" kindref="compound">gf::RectI</ref><sp/>r2(<ref refid="structgf_1_1_rect_1a708278f513d42dd1874006b5ba1268cb" kindref="member">position</ref>,<sp/>size);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>intersections<sp/>with<sp/>the<sp/>point<sp/>(3,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/>r1.contains({<sp/>3,<sp/>1<sp/>});<sp/></highlight><highlight class="comment">//<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b2<sp/>=<sp/>r2.contains({<sp/>3,<sp/>1<sp/>});<sp/></highlight><highlight class="comment">//<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>the<sp/>intersection<sp/>between<sp/>r1<sp/>and<sp/>r2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structgf_1_1_rect" kindref="compound">gf::RectI</ref><sp/>result;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b3<sp/>=<sp/>r1.<ref refid="structgf_1_1_rect_1a7fc95ee96635c5cc9aaa1aed9dfe3653" kindref="member">intersects</ref>(r2,<sp/>result);<sp/></highlight><highlight class="comment">//<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>result<sp/>==<sp/>(4,<sp/>2,<sp/>16,<sp/>3)</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <collaborationgraph>
      <node id="610">
        <label>T</label>
      </node>
      <node id="608">
        <label>gf::Rect&lt; T &gt;</label>
        <link refid="structgf_1_1_rect"/>
        <childnode refid="609" relation="usage">
          <edgelabel>size</edgelabel>
          <edgelabel>position</edgelabel>
        </childnode>
        <childnode refid="610" relation="usage">
          <edgelabel>width</edgelabel>
          <edgelabel>height</edgelabel>
          <edgelabel>left</edgelabel>
          <edgelabel>top</edgelabel>
        </childnode>
      </node>
      <node id="609">
        <label>gf::Vector&lt; T, 2 &gt;</label>
        <link refid="structgf_1_1_vector_3_01_t_00_012_01_4"/>
        <childnode refid="609" relation="usage">
          <edgelabel>@23</edgelabel>
        </childnode>
        <childnode refid="610" relation="usage">
          <edgelabel>width</edgelabel>
          <edgelabel>x</edgelabel>
          <edgelabel>y</edgelabel>
          <edgelabel>row</edgelabel>
          <edgelabel>height</edgelabel>
          <edgelabel>col</edgelabel>
          <edgelabel>data</edgelabel>
          <edgelabel>s</edgelabel>
          <edgelabel>t</edgelabel>
          <edgelabel>u</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" line="88" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Rect.h" bodystart="88" bodyend="313"/>
    <listofallmembers>
      <member refid="structgf_1_1_rect_1a7b9510137dd4a01702ba4aeb50adc16b" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>contains</name></member>
      <member refid="structgf_1_1_rect_1a898f0e3f5b7f72e01e48fd6d5b3b3ddb" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>contains</name></member>
      <member refid="structgf_1_1_rect_1a05fb42f7b0d58e1d6f750d4a8406861f" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>extend</name></member>
      <member refid="structgf_1_1_rect_1a8b1ec8c4c9ff0c473e8bac6775bc9cbc" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>getBottomLeft</name></member>
      <member refid="structgf_1_1_rect_1a7a6b806b739329c57e4af1bf38104a85" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>getBottomRight</name></member>
      <member refid="structgf_1_1_rect_1a820b61d051e5b28c23fc0a8a4f744319" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>getCenter</name></member>
      <member refid="structgf_1_1_rect_1a3526a4e0e8ebd90bd492474cbb8ba5bb" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>getPosition</name></member>
      <member refid="structgf_1_1_rect_1a9dc25fbaa2ae8677c54850e95d3778d8" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>getSize</name></member>
      <member refid="structgf_1_1_rect_1a57909f8f3223e9fb61270c50e09168cb" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>getTopLeft</name></member>
      <member refid="structgf_1_1_rect_1a624ceef6cb53228f88e8730d54ae7776" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>getTopRight</name></member>
      <member refid="structgf_1_1_rect_1a59b831108fcd75671d9267fefa45d280" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>height</name></member>
      <member refid="structgf_1_1_rect_1a7fc95ee96635c5cc9aaa1aed9dfe3653" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>intersects</name></member>
      <member refid="structgf_1_1_rect_1ad6a10f923f3ca3258f99752eef40d98d" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>intersects</name></member>
      <member refid="structgf_1_1_rect_1ad1547ba47e53250eb20b65ede56dbd40" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>isEmpty</name></member>
      <member refid="structgf_1_1_rect_1a01a96ece737f758b04a6bcca8327ab34" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>left</name></member>
      <member refid="structgf_1_1_rect_1a590fe9be9de875b208062066f5f86245" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>operator!=</name></member>
      <member refid="structgf_1_1_rect_1a2b38f77ccdaf66aed571fe18e09d08bc" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>operator==</name></member>
      <member refid="structgf_1_1_rect_1a708278f513d42dd1874006b5ba1268cb" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>position</name></member>
      <member refid="structgf_1_1_rect_1a774fe0d26aabd14a3106328872c7de98" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>Rect</name></member>
      <member refid="structgf_1_1_rect_1a4e79c1503c8116f59a650b21a050b126" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>Rect</name></member>
      <member refid="structgf_1_1_rect_1a82a329acf5b682d3da5bc50e09f3a31f" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>Rect</name></member>
      <member refid="structgf_1_1_rect_1a4ca7bb6409150f809d79baf98d83d1a0" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>shrink</name></member>
      <member refid="structgf_1_1_rect_1af73c86b1f9f81892b6a8e59e749790c4" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>size</name></member>
      <member refid="structgf_1_1_rect_1a7f22a584e99f994a50c8b491225401c9" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>top</name></member>
      <member refid="structgf_1_1_rect_1a34b78b7578c5b451db327102e33c7fc5" prot="public" virt="non-virtual"><scope>gf::Rect</scope><name>width</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
