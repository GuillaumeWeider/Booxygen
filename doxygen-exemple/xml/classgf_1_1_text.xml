<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgf_1_1_text" kind="class" language="C++" prot="public">
    <compoundname>gf::Text</compoundname>
    <basecompoundref refid="classgf_1_1_transformable" prot="public" virt="non-virtual">gf::Transformable</basecompoundref>
    <includes refid="_text_8h" local="no">gf/Text.h</includes>
    <innerclass refid="structgf_1_1_text_1_1_line" prot="private">gf::Text::Line</innerclass>
    <innerclass refid="structgf_1_1_text_1_1_paragraph" prot="private">gf::Text::Paragraph</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgf_1_1_text_1a65f2fa561e0b8fdeae8abd159b4de1e5" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string gf::Text::m_string</definition>
        <argsstring></argsstring>
        <name>m_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="363" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_text_1a676c819810288b94053053b48de05d09" prot="private" static="no" mutable="no">
        <type><ref refid="classgf_1_1_font" kindref="compound">Font</ref> *</type>
        <definition>Font* gf::Text::m_font</definition>
        <argsstring></argsstring>
        <name>m_font</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="364" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_text_1a7a5ad25479c9592f69b3abd4f3876766" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned gf::Text::m_characterSize</definition>
        <argsstring></argsstring>
        <name>m_characterSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="365" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_text_1a6cba2094cc05cdb5947be147da4f399b" prot="private" static="no" mutable="no">
        <type><ref refid="group__core_1ga8c82c7df6d3bbd7f8d3601534b22a087" kindref="member">Color4f</ref></type>
        <definition>Color4f gf::Text::m_color</definition>
        <argsstring></argsstring>
        <name>m_color</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="366" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_text_1a1d135ac7aa7fd9537363410b6fb3d4f4" prot="private" static="no" mutable="no">
        <type><ref refid="classgf_1_1_vertex_array" kindref="compound">VertexArray</ref></type>
        <definition>VertexArray gf::Text::m_vertices</definition>
        <argsstring></argsstring>
        <name>m_vertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="367" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_text_1a604a95687cbc2ba6da1756591a45f65a" prot="private" static="no" mutable="no">
        <type><ref refid="group__core_1gac3887a7df16895871374b04d9f6cb961" kindref="member">RectF</ref></type>
        <definition>RectF gf::Text::m_bounds</definition>
        <argsstring></argsstring>
        <name>m_bounds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="368" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_text_1a43349db3d8520903e263221ded604793" prot="private" static="no" mutable="no">
        <type><ref refid="group__core_1ga8c82c7df6d3bbd7f8d3601534b22a087" kindref="member">Color4f</ref></type>
        <definition>Color4f gf::Text::m_outlineColor</definition>
        <argsstring></argsstring>
        <name>m_outlineColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="370" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_text_1a3d1811892c882dd8ff45fd131514a979" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float gf::Text::m_outlineThickness</definition>
        <argsstring></argsstring>
        <name>m_outlineThickness</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="371" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_text_1a7bf0cf26ba00e730fdc177e33788dd51" prot="private" static="no" mutable="no">
        <type><ref refid="classgf_1_1_vertex_array" kindref="compound">VertexArray</ref></type>
        <definition>VertexArray gf::Text::m_outlineVertices</definition>
        <argsstring></argsstring>
        <name>m_outlineVertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="372" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_text_1af950f176e5bfc89daae421637a9136de" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float gf::Text::m_paragraphWidth</definition>
        <argsstring></argsstring>
        <name>m_paragraphWidth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="374" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgf_1_1_text_1a05c7fd9f3ca995e3161f2645d8c6f24d" prot="private" static="no" mutable="no">
        <type><ref refid="group__graphics_1ga5229ccbffec1016d760ddfe296fd2edf" kindref="member">Alignment</ref></type>
        <definition>Alignment gf::Text::m_align</definition>
        <argsstring></argsstring>
        <name>m_align</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="375" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgf_1_1_text_1a688dd7ec3106d44c473fa0f666f0a1c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gf::Text::Text</definition>
        <argsstring>()</argsstring>
        <name>Text</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Creates an empty text. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1acea7eb9f429d1ac66af02c664fbcc53c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gf::Text::Text</definition>
        <argsstring>(std::string string, Font &amp;font, unsigned characterSize=30)</argsstring>
        <name>Text</name>
        <param>
          <type>std::string</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="classgf_1_1_font" kindref="compound">Font</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>characterSize</declname>
          <defval>30</defval>
        </param>
        <briefdescription>
<para>Construct the text from a string, font and size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgf_1_1_text" kindref="compound">Text</ref> assigned to the string in UTF-8 format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgf_1_1_font" kindref="compound">Font</ref> used to draw the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>characterSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Base size of characters, in pixels </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a15a7a23bc26f574b29b11f1ea96867bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gf::Text::setString</definition>
        <argsstring>(std::string string)</argsstring>
        <name>setString</name>
        <param>
          <type>std::string</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Set the text&apos;s string. </para>        </briefdescription>
        <detaileddescription>
<para>The text string is in UTF-8 format. A text&apos;s string is empty by default.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>New string in UTF-8 format</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a2d1beea276f7ae017349dbb336f47036" kindref="member">getString()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a2d1beea276f7ae017349dbb336f47036" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; gf::Text::getString</definition>
        <argsstring>() const</argsstring>
        <name>getString</name>
        <briefdescription>
<para>Get the text&apos;s string. </para>        </briefdescription>
        <detaileddescription>
<para>The text string is in UTF-8 format.</para><para><simplesect kind="return"><para><ref refid="classgf_1_1_text" kindref="compound">Text</ref>&apos;s string</para></simplesect>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a15a7a23bc26f574b29b11f1ea96867bb" kindref="member">setString()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="130" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a6672633cb3345b8d0ee61035603710bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gf::Text::setCharacterSize</definition>
        <argsstring>(unsigned characterSize)</argsstring>
        <name>setCharacterSize</name>
        <param>
          <type>unsigned</type>
          <declname>characterSize</declname>
        </param>
        <briefdescription>
<para>Set the character size. </para>        </briefdescription>
        <detaileddescription>
<para>The default size is 30.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>characterSize</parametername>
</parameternamelist>
<parameterdescription>
<para>New character size, in pixels</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a45fcfa45b94af39d65a6bfc701a41bbb" kindref="member">getCharacterSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a45fcfa45b94af39d65a6bfc701a41bbb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned gf::Text::getCharacterSize</definition>
        <argsstring>() const</argsstring>
        <name>getCharacterSize</name>
        <briefdescription>
<para>Get the character size. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Size of the characters, in pixels</para></simplesect>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a6672633cb3345b8d0ee61035603710bd" kindref="member">setCharacterSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="152" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a744ea0ad425deb12a29f9f58a6738f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gf::Text::setFont</definition>
        <argsstring>(Font &amp;font)</argsstring>
        <name>setFont</name>
        <param>
          <type><ref refid="classgf_1_1_font" kindref="compound">Font</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Set the text&apos;s font. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>font</computeroutput> argument refers to a font that must exist as long as the text uses it. Indeed, the text doesn&apos;t store its own copy of the font, but rather keeps a pointer to the one that you passed to this function. If the font is destroyed and the text tries to use it, the behavior is undefined.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>New font</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a361766f64e6d1508681174daf171550a" kindref="member">getFont()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a361766f64e6d1508681174daf171550a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classgf_1_1_font" kindref="compound">Font</ref> *</type>
        <definition>const Font* gf::Text::getFont</definition>
        <argsstring>() const</argsstring>
        <name>getFont</name>
        <briefdescription>
<para>Get the text&apos;s font. </para>        </briefdescription>
        <detaileddescription>
<para>If the text has no font attached, a <computeroutput>nullptr</computeroutput> pointer is returned. The returned pointer is const, which means that you cannot modify the font when you get it from this function.</para><para><simplesect kind="return"><para>Pointer to the text&apos;s font</para></simplesect>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a744ea0ad425deb12a29f9f58a6738f7b" kindref="member">setFont()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="183" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a2535c60731dbe963c2c8e07613c7cd18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gf::Text::setColor</definition>
        <argsstring>(const Color4f &amp;color)</argsstring>
        <name>setColor</name>
        <param>
          <type>const <ref refid="group__core_1ga8c82c7df6d3bbd7f8d3601534b22a087" kindref="member">Color4f</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the fill color of the text. </para>        </briefdescription>
        <detaileddescription>
<para>By default, the text&apos;s fill color is opaque black. Setting the fill color to a transparent color with an outline will cause the outline to be displayed in the fill area of the text.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>New fill color of the text</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a24ac889ebd9b05a92f5bf337d641d111" kindref="member">getColor()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a24ac889ebd9b05a92f5bf337d641d111" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="group__core_1ga8c82c7df6d3bbd7f8d3601534b22a087" kindref="member">Color4f</ref> &amp;</type>
        <definition>const Color4f&amp; gf::Text::getColor</definition>
        <argsstring>() const</argsstring>
        <name>getColor</name>
        <briefdescription>
<para>Get the fill color of the text. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Fill color of the text</para></simplesect>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a2535c60731dbe963c2c8e07613c7cd18" kindref="member">setColor()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="207" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a0adb098912e56851b5e272e05c405240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gf::Text::setOutlineColor</definition>
        <argsstring>(const Color4f &amp;color)</argsstring>
        <name>setOutlineColor</name>
        <param>
          <type>const <ref refid="group__core_1ga8c82c7df6d3bbd7f8d3601534b22a087" kindref="member">Color4f</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the outline color of the text. </para>        </briefdescription>
        <detaileddescription>
<para>By default, the text&apos;s outline color is opaque black.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>New outline color of the text</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a4a1f2d8f22c012beeab5721ffb9fd111" kindref="member">getOutlineColor()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a4a1f2d8f22c012beeab5721ffb9fd111" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="group__core_1ga8c82c7df6d3bbd7f8d3601534b22a087" kindref="member">Color4f</ref> &amp;</type>
        <definition>const Color4f&amp; gf::Text::getOutlineColor</definition>
        <argsstring>() const</argsstring>
        <name>getOutlineColor</name>
        <briefdescription>
<para>Get the outline color of the text. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Outline color of the text</para></simplesect>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a0adb098912e56851b5e272e05c405240" kindref="member">setOutlineColor()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="229" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="229" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a5ae723b509093285fefeaa154fe9fac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gf::Text::setOutlineThickness</definition>
        <argsstring>(float thickness)</argsstring>
        <name>setOutlineThickness</name>
        <param>
          <type>float</type>
          <declname>thickness</declname>
        </param>
        <briefdescription>
<para>Set the thickness of the text&apos;s outline. </para>        </briefdescription>
        <detaileddescription>
<para>By default, the outline thickness is 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thickness</parametername>
</parameternamelist>
<parameterdescription>
<para>New outline thickness, in pixels</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a7748e8d548842432e022cc74e322dee0" kindref="member">getOutlineThickness()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a7748e8d548842432e022cc74e322dee0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float gf::Text::getOutlineThickness</definition>
        <argsstring>()</argsstring>
        <name>getOutlineThickness</name>
        <briefdescription>
<para>Get the outline thickness of the text. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Outline thickness of the text, in pixels</para></simplesect>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a5ae723b509093285fefeaa154fe9fac3" kindref="member">setOutlineThickness()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="251" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="251" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a99cf4f52fb3b6490153c28980253d91e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gf::Text::setParagraphWidth</definition>
        <argsstring>(float paragraphWidth)</argsstring>
        <name>setParagraphWidth</name>
        <param>
          <type>float</type>
          <declname>paragraphWidth</declname>
        </param>
        <briefdescription>
<para>Set the paragraph width for aligned text. </para>        </briefdescription>
        <detaileddescription>
<para>By default, the paragraph width is 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>paragraphWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>New paragraph width in pixels </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a23297dc85bc072b4c9a82b0d96084500" kindref="member">getParagraphWidth()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a23297dc85bc072b4c9a82b0d96084500" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float gf::Text::getParagraphWidth</definition>
        <argsstring>() const</argsstring>
        <name>getParagraphWidth</name>
        <briefdescription>
<para>Get the paragraph width. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Paragraph width in pixels </para></simplesect>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a99cf4f52fb3b6490153c28980253d91e" kindref="member">setParagraphWidth()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="271" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="271" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a92be155279c1ca043a2a400a9e3380ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gf::Text::setAlignment</definition>
        <argsstring>(Alignment align)</argsstring>
        <name>setAlignment</name>
        <param>
          <type><ref refid="group__graphics_1ga5229ccbffec1016d760ddfe296fd2edf" kindref="member">Alignment</ref></type>
          <declname>align</declname>
        </param>
        <briefdescription>
<para>Set the alignement of the text. </para>        </briefdescription>
        <detaileddescription>
<para>By default, the text is not aligned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>New alignement </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1ad4b278345c9f9bdad8371503b1872b07" kindref="member">getAlignment()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1ad4b278345c9f9bdad8371503b1872b07" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__graphics_1ga5229ccbffec1016d760ddfe296fd2edf" kindref="member">Alignment</ref></type>
        <definition>Alignment gf::Text::getAlignment</definition>
        <argsstring>() const</argsstring>
        <name>getAlignment</name>
        <briefdescription>
<para>Get the alignment of the text. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current alignment of the text </para></simplesect>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a92be155279c1ca043a2a400a9e3380ea" kindref="member">setAlignment()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="291" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="291" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a24dd918b7b830b4acc19217c303d031f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__core_1gac3887a7df16895871374b04d9f6cb961" kindref="member">RectF</ref></type>
        <definition>RectF gf::Text::getLocalBounds</definition>
        <argsstring>() const</argsstring>
        <name>getLocalBounds</name>
        <briefdescription>
<para>Get the local bounding rectangle of the entity. </para>        </briefdescription>
        <detaileddescription>
<para>The returned rectangle is in local coordinates, which means that it ignores the transformations (translation, rotation, scale, ...) that are applied to the entity. In other words, this function returns the bounds of the entity in the entity&apos;s coordinate system.</para><para><simplesect kind="return"><para>Local bounding rectangle of the entity </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="306" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="306" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1aa2e05ca167525b13bbc5757cee6adeff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gf::Text::setAnchor</definition>
        <argsstring>(Anchor anchor)</argsstring>
        <name>setAnchor</name>
        <param>
          <type><ref refid="group__graphics_1gadeb9cdf9d7e8eec2eb8cc638c54b5066" kindref="member">Anchor</ref></type>
          <declname>anchor</declname>
        </param>
        <briefdescription>
<para>Set the anchor origin of the entity. </para>        </briefdescription>
        <detaileddescription>
<para>Compute the origin of the entity based on the local bounds and the specified anchor. Internally, this function calls <computeroutput><ref refid="classgf_1_1_transformable_1a31bb4b55326593ea763dfdc8f12c67f4" kindref="member">Transformable::setOrigin()</ref></computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anchor</parametername>
</parameternamelist>
<parameterdescription>
<para>The anchor of the entity </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classgf_1_1_text_1a24dd918b7b830b4acc19217c303d031f" kindref="member">getLocalBounds()</ref>, <ref refid="classgf_1_1_transformable_1a31bb4b55326593ea763dfdc8f12c67f4" kindref="member">Transformable::setOrigin()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a6d0c183779ef3f68d3f0ff609522e18b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgf_1_1_vertex_buffer" kindref="compound">VertexBuffer</ref></type>
        <definition>VertexBuffer gf::Text::commitGeometry</definition>
        <argsstring>() const</argsstring>
        <name>commitGeometry</name>
        <briefdescription>
<para>Create a buffer with the current geometry. </para>        </briefdescription>
        <detaileddescription>
<para>The geometry is uploaded in the graphics memory so that it&apos;s faster to draw.</para><para><simplesect kind="return"><para>A buffer with the current geometry </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a0fa98657e40edca40e6e7a8ef09511e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgf_1_1_vertex_buffer" kindref="compound">VertexBuffer</ref></type>
        <definition>VertexBuffer gf::Text::commitOutlineGeometry</definition>
        <argsstring>() const</argsstring>
        <name>commitOutlineGeometry</name>
        <briefdescription>
<para>Create a buffer with the current outline geometry. </para>        </briefdescription>
        <detaileddescription>
<para>The geometry is uploaded in the graphics memory so that it&apos;s faster to draw.</para><para><simplesect kind="return"><para>A buffer with the current outline geometry </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="340" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1acf6574bce3190b15c0ff3b648e09b507" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void gf::Text::draw</definition>
        <argsstring>(RenderTarget &amp;target, RenderStates states) override</argsstring>
        <name>draw</name>
        <reimplements refid="classgf_1_1_drawable_1a01535a84e4fb6222311ceb81accc4a27">draw</reimplements>
        <param>
          <type><ref refid="classgf_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="structgf_1_1_render_states" kindref="compound">RenderStates</ref></type>
          <declname>states</declname>
        </param>
        <briefdescription>
<para>Draw the object to a render target. </para>        </briefdescription>
        <detaileddescription>
<para>This is a pure virtual function that has to be implemented by the derived class to define how the drawable should be drawn.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Render target to draw to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>states</parametername>
</parameternamelist>
<parameterdescription>
<para>Current render states </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="342" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgf_1_1_text_1a01e7f8646911e10107ddd82fb3218fbe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gf::Text::updateGeometry</definition>
        <argsstring>()</argsstring>
        <name>updateGeometry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1a972910281058f435713603baf3f755ab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float gf::Text::getWordWidth</definition>
        <argsstring>(const std::u32string &amp;word)</argsstring>
        <name>getWordWidth</name>
        <param>
          <type>const std::u32string &amp;</type>
          <declname>word</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgf_1_1_text_1abe06fcd76bf7b764f855557a8abdb8eb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Paragraph &gt;</type>
        <definition>std::vector&lt;Paragraph&gt; gf::Text::makeParagraphs</definition>
        <argsstring>(const std::string &amp;str, float spaceWidth)</argsstring>
        <name>makeParagraphs</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>float</type>
          <declname>spaceWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="360" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Graphical text that can be drawn to a render target. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="classgf_1_1_text" kindref="compound">gf::Text</ref> is a drawable class that allows to easily display some text with custom style and color on a render target.</para><para>It inherits all the functions from <ref refid="classgf_1_1_transformable" kindref="compound">gf::Transformable</ref>: position, rotation, scale, origin. It also adds text-specific properties such as the font to use, the character size, the global color and the text to display of course. It also provides convenience functions to calculate the graphical size of the text.</para><para><ref refid="classgf_1_1_text" kindref="compound">gf::Text</ref> works in combination with the <ref refid="classgf_1_1_font" kindref="compound">gf::Font</ref> class, which loads and provides the glyphs (visual characters) of a given font.</para><para>The separation of <ref refid="classgf_1_1_font" kindref="compound">gf::Font</ref> and <ref refid="classgf_1_1_text" kindref="compound">gf::Text</ref> allows more flexibility and better performances: indeed a <ref refid="classgf_1_1_font" kindref="compound">gf::Font</ref> is a heavy resource, and any operation on it is slow (often too slow for real-time applications). On the other side, a <ref refid="classgf_1_1_text" kindref="compound">gf::Text</ref> is a lightweight object which can combine the glyphs data and metrics of a <ref refid="classgf_1_1_font" kindref="compound">gf::Font</ref> to display any text on a render target.</para><para>It is important to note that the <ref refid="classgf_1_1_text" kindref="compound">gf::Text</ref> instance doesn&apos;t copy the font that it uses, it only keeps a reference to it. Thus, a <ref refid="classgf_1_1_font" kindref="compound">gf::Font</ref> must not be destructed while it is used by a <ref refid="classgf_1_1_text" kindref="compound">gf::Text</ref> (i.e. never write a function that uses a local <ref refid="classgf_1_1_font" kindref="compound">gf::Font</ref> instance for creating a text).</para><para>Usage example:</para><para><programlisting><codeline><highlight class="comment">//<sp/>Declare<sp/>and<sp/>load<sp/>a<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classgf_1_1_font" kindref="compound">gf::Font</ref><sp/>font;</highlight></codeline>
<codeline><highlight class="normal">font.<ref refid="classgf_1_1_font_1aa7d23688c81a7c31a5667547e1072501" kindref="member">loadFromFile</ref>(</highlight><highlight class="stringliteral">&quot;arial.ttf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classgf_1_1_text" kindref="compound">gf::Text</ref><sp/>text(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/>font);</highlight></codeline>
<codeline><highlight class="normal">text.setCharacterSize(30);</highlight></codeline>
<codeline><highlight class="normal">text.setColor(<ref refid="structgf_1_1_color_1a7abeab052065d849d6a3f8b0d9ed57eb" kindref="member">gf::Color::Red</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">rendered.draw(text);</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="classgf_1_1_font" kindref="compound">gf::Font</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="767">
        <label>gf::Drawable</label>
        <link refid="classgf_1_1_drawable"/>
      </node>
      <node id="765">
        <label>gf::Text</label>
        <link refid="classgf_1_1_text"/>
        <childnode refid="766" relation="public-inheritance">
        </childnode>
      </node>
      <node id="766">
        <label>gf::Transformable</label>
        <link refid="classgf_1_1_transformable"/>
        <childnode refid="767" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="770">
        <label>gf::Drawable</label>
        <link refid="classgf_1_1_drawable"/>
      </node>
      <node id="768">
        <label>gf::Text</label>
        <link refid="classgf_1_1_text"/>
        <childnode refid="769" relation="public-inheritance">
        </childnode>
      </node>
      <node id="769">
        <label>gf::Transformable</label>
        <link refid="classgf_1_1_transformable"/>
        <childnode refid="770" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" line="91" column="1" bodyfile="/home/jbernard/Workshop/gf/versions/include/gf/Text.h" bodystart="91" bodyend="376"/>
    <listofallmembers>
      <member refid="classgf_1_1_text_1a6d0c183779ef3f68d3f0ff609522e18b" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>commitGeometry</name></member>
      <member refid="classgf_1_1_text_1a0fa98657e40edca40e6e7a8ef09511e7" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>commitOutlineGeometry</name></member>
      <member refid="classgf_1_1_text_1acf6574bce3190b15c0ff3b648e09b507" prot="public" virt="virtual"><scope>gf::Text</scope><name>draw</name></member>
      <member refid="classgf_1_1_text_1ad4b278345c9f9bdad8371503b1872b07" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getAlignment</name></member>
      <member refid="classgf_1_1_text_1a45fcfa45b94af39d65a6bfc701a41bbb" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getCharacterSize</name></member>
      <member refid="classgf_1_1_text_1a24ac889ebd9b05a92f5bf337d641d111" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getColor</name></member>
      <member refid="classgf_1_1_text_1a361766f64e6d1508681174daf171550a" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getFont</name></member>
      <member refid="classgf_1_1_transformable_1ae8272f770cf0acca8896f368c9c1cea5" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getInverseTransform</name></member>
      <member refid="classgf_1_1_text_1a24dd918b7b830b4acc19217c303d031f" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getLocalBounds</name></member>
      <member refid="classgf_1_1_transformable_1a3737c1966237816e3b25bf60a443e327" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getOrigin</name></member>
      <member refid="classgf_1_1_text_1a4a1f2d8f22c012beeab5721ffb9fd111" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getOutlineColor</name></member>
      <member refid="classgf_1_1_text_1a7748e8d548842432e022cc74e322dee0" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getOutlineThickness</name></member>
      <member refid="classgf_1_1_text_1a23297dc85bc072b4c9a82b0d96084500" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getParagraphWidth</name></member>
      <member refid="classgf_1_1_transformable_1a6b0278741e6f39d27d7879ba16f1f3be" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getPosition</name></member>
      <member refid="classgf_1_1_transformable_1a3324b9c470c4ae376294d212c66e4f02" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getRotation</name></member>
      <member refid="classgf_1_1_transformable_1a9d56ee2060eef2666f95024dc03b9c12" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getScale</name></member>
      <member refid="classgf_1_1_text_1a2d1beea276f7ae017349dbb336f47036" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getString</name></member>
      <member refid="classgf_1_1_transformable_1aa742e95c087b0340bcff458b8872e2ea" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>getTransform</name></member>
      <member refid="classgf_1_1_text_1a972910281058f435713603baf3f755ab" prot="private" virt="non-virtual"><scope>gf::Text</scope><name>getWordWidth</name></member>
      <member refid="classgf_1_1_text_1a05c7fd9f3ca995e3161f2645d8c6f24d" prot="private" virt="non-virtual"><scope>gf::Text</scope><name>m_align</name></member>
      <member refid="classgf_1_1_text_1a604a95687cbc2ba6da1756591a45f65a" prot="private" virt="non-virtual"><scope>gf::Text</scope><name>m_bounds</name></member>
      <member refid="classgf_1_1_text_1a7a5ad25479c9592f69b3abd4f3876766" prot="private" virt="non-virtual"><scope>gf::Text</scope><name>m_characterSize</name></member>
      <member refid="classgf_1_1_text_1a6cba2094cc05cdb5947be147da4f399b" prot="private" virt="non-virtual"><scope>gf::Text</scope><name>m_color</name></member>
      <member refid="classgf_1_1_text_1a676c819810288b94053053b48de05d09" prot="private" virt="non-virtual"><scope>gf::Text</scope><name>m_font</name></member>
      <member refid="classgf_1_1_text_1a43349db3d8520903e263221ded604793" prot="private" virt="non-virtual"><scope>gf::Text</scope><name>m_outlineColor</name></member>
      <member refid="classgf_1_1_text_1a3d1811892c882dd8ff45fd131514a979" prot="private" virt="non-virtual"><scope>gf::Text</scope><name>m_outlineThickness</name></member>
      <member refid="classgf_1_1_text_1a7bf0cf26ba00e730fdc177e33788dd51" prot="private" virt="non-virtual"><scope>gf::Text</scope><name>m_outlineVertices</name></member>
      <member refid="classgf_1_1_text_1af950f176e5bfc89daae421637a9136de" prot="private" virt="non-virtual"><scope>gf::Text</scope><name>m_paragraphWidth</name></member>
      <member refid="classgf_1_1_text_1a65f2fa561e0b8fdeae8abd159b4de1e5" prot="private" virt="non-virtual"><scope>gf::Text</scope><name>m_string</name></member>
      <member refid="classgf_1_1_text_1a1d135ac7aa7fd9537363410b6fb3d4f4" prot="private" virt="non-virtual"><scope>gf::Text</scope><name>m_vertices</name></member>
      <member refid="classgf_1_1_text_1abe06fcd76bf7b764f855557a8abdb8eb" prot="private" virt="non-virtual"><scope>gf::Text</scope><name>makeParagraphs</name></member>
      <member refid="classgf_1_1_transformable_1a2e576b2f64c1f8591d82e8065eae738b" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>move</name></member>
      <member refid="classgf_1_1_transformable_1a2957de61d2a76e9ae3c377c0aa477f53" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>rotate</name></member>
      <member refid="classgf_1_1_transformable_1a61953d559ea3d1eaf718304d045a250a" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>scale</name></member>
      <member refid="classgf_1_1_transformable_1ae9bae0ed6df111d554ce94595e2a15f1" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>scale</name></member>
      <member refid="classgf_1_1_text_1a92be155279c1ca043a2a400a9e3380ea" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>setAlignment</name></member>
      <member refid="classgf_1_1_text_1aa2e05ca167525b13bbc5757cee6adeff" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>setAnchor</name></member>
      <member refid="classgf_1_1_text_1a6672633cb3345b8d0ee61035603710bd" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>setCharacterSize</name></member>
      <member refid="classgf_1_1_text_1a2535c60731dbe963c2c8e07613c7cd18" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>setColor</name></member>
      <member refid="classgf_1_1_text_1a744ea0ad425deb12a29f9f58a6738f7b" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>setFont</name></member>
      <member refid="classgf_1_1_transformable_1a31bb4b55326593ea763dfdc8f12c67f4" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>setOrigin</name></member>
      <member refid="classgf_1_1_transformable_1a78fd003ff0412d2228764d6564d6ba69" prot="protected" virt="non-virtual"><scope>gf::Text</scope><name>setOriginFromAnchorAndBounds</name></member>
      <member refid="classgf_1_1_text_1a0adb098912e56851b5e272e05c405240" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>setOutlineColor</name></member>
      <member refid="classgf_1_1_text_1a5ae723b509093285fefeaa154fe9fac3" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>setOutlineThickness</name></member>
      <member refid="classgf_1_1_text_1a99cf4f52fb3b6490153c28980253d91e" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>setParagraphWidth</name></member>
      <member refid="classgf_1_1_transformable_1a1110891882093c2e8cbfc839e3300dca" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>setPosition</name></member>
      <member refid="classgf_1_1_transformable_1a66ef2bc90dcff50e070a6d0874b3824a" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>setRotation</name></member>
      <member refid="classgf_1_1_transformable_1a8c8a9bd669c0dbbd265d7188a669edb1" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>setScale</name></member>
      <member refid="classgf_1_1_transformable_1a642eb45044feb40084a8be341b0a8822" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>setScale</name></member>
      <member refid="classgf_1_1_text_1a15a7a23bc26f574b29b11f1ea96867bb" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>setString</name></member>
      <member refid="classgf_1_1_text_1a688dd7ec3106d44c473fa0f666f0a1c2" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>Text</name></member>
      <member refid="classgf_1_1_text_1acea7eb9f429d1ac66af02c664fbcc53c" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>Text</name></member>
      <member refid="classgf_1_1_transformable_1ab6b8f8feebda03222ec0858b0218a64e" prot="public" virt="non-virtual"><scope>gf::Text</scope><name>Transformable</name></member>
      <member refid="classgf_1_1_text_1a01e7f8646911e10107ddd82fb3218fbe" prot="private" virt="non-virtual"><scope>gf::Text</scope><name>updateGeometry</name></member>
      <member refid="classgf_1_1_drawable_1a3bf0f49a1782c18e524ab0aeb0fefd7b" prot="public" virt="virtual"><scope>gf::Text</scope><name>~Drawable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
