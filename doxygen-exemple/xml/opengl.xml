<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="opengl" kind="page">
    <compoundname>opengl</compoundname>
    <title>OpenGL in gf</title>
    <detaileddescription>
<sect1 id="opengl_1gl_why">
<title>Why OpenGL ES 2.0?</title>
<para>Gamedev Framework is based on Open GL ES 2.0. This choice is motivated by the following facts:</para><para><itemizedlist>
<listitem><para>OpenGL ES 2.0 is quite old (2007) but is everywhere from desktop computers to mobile devices. Open GL ES 3.0 is too young (2012).</para></listitem><listitem><para>WebGL is based on OpenGL ES 2.0, so as soon as there is a browser that supports WebGL, there is a driver that has the features for OpenGL ES 2.0.</para></listitem><listitem><para>The features of OpenGL ES 2.0 reflects the modern way of doing OpenGL (bye bye <computeroutput>glBegin()</computeroutput>, hello shaders).</para></listitem><listitem><para>Some features are missing in OpenGL ES 2.0 compared to OpenGL but it&apos;s not really a problem for 2D</para></listitem><listitem><para>It has been present in <ulink url="http://www.mesa3d.org/">Mesa 3D</ulink> since Mesa 3D 8.0 in 2012.</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="opengl_1Conventions">
<title>Conventions</title>
<sect2 id="opengl_1gl_textures">
<title>Textures</title>
<para>In OpenGL, texture data should be uploaded beginning with the lower left corner. In gf, textures are uploaded beginning with the upper left corner, meaning that they are horizontally flipped in graphical memory. This is not a problem.</para><para>Indeed, texture coordinates normally range from <formula id="3">$ 0 $</formula> to <formula id="72">$ 1 $</formula>, <formula id="80">$ (0,0) $</formula> being the lower left corner. In gf, the convention is that <formula id="80">$ (0,0) $</formula> represents the upper left corner, which is more intuitive for a graphical application.</para><para><simplesect kind="see"><para><ulink url="http://docs.gl/es2/glTexImage2D">glTexImage2D</ulink>, <ulink url="https://open.gl/textures">open.gl: Textures objects and parameters</ulink></para></simplesect>
</para></sect2>
<sect2 id="opengl_1gl_matrices">
<title>Matrices</title>
<para>In OpenGL, matrices are defined in column major order. In gf, <ref refid="structgf_1_1_matrix" kindref="compound">gf::Matrix</ref> is defined in row major order. So, when uploaded directly, the matrix is transposed. As a consequence, in the shader, instead of doing a matrix-vector multiplication, we have to do a vector-matrix multiplication and that&apos;s it.</para><para><simplesect kind="see"><para><ulink url="http://docs.gl/es2/glUniform">glUniformMatrix{2|3|4}fv</ulink>, <ulink url="http://stackoverflow.com/questions/16893536/using-row-major-in-opengl-shader">Stack Overflow: Using row-major in OpenGL shader</ulink> </para></simplesect>
</para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
